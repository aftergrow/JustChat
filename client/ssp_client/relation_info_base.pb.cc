// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: relation_info_base.proto

#include "relation_info_base.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace ssp {
constexpr RelationInfoBase::RelationInfoBase(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : friend_list_()
  , black_list_()
  , ver_(0u)
  , user_id_(0u){}
struct RelationInfoBaseDefaultTypeInternal {
  constexpr RelationInfoBaseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RelationInfoBaseDefaultTypeInternal() {}
  union {
    RelationInfoBase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RelationInfoBaseDefaultTypeInternal _RelationInfoBase_default_instance_;
}  // namespace ssp
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_relation_5finfo_5fbase_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_relation_5finfo_5fbase_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_relation_5finfo_5fbase_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_relation_5finfo_5fbase_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ssp::RelationInfoBase, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssp::RelationInfoBase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssp::RelationInfoBase, ver_),
  PROTOBUF_FIELD_OFFSET(::ssp::RelationInfoBase, user_id_),
  PROTOBUF_FIELD_OFFSET(::ssp::RelationInfoBase, friend_list_),
  PROTOBUF_FIELD_OFFSET(::ssp::RelationInfoBase, black_list_),
  0,
  1,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::ssp::RelationInfoBase)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssp::_RelationInfoBase_default_instance_),
};

const char descriptor_table_protodef_relation_5finfo_5fbase_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030relation_info_base.proto\022\003ssp\"Y\n\020Relat"
  "ionInfoBase\022\013\n\003ver\030\001 \001(\r\022\017\n\007user_id\030\002 \001("
  "\r\022\023\n\013friend_list\030\003 \003(\r\022\022\n\nblack_list\030\004 \003"
  "(\r"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_relation_5finfo_5fbase_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_relation_5finfo_5fbase_2eproto = {
  false, false, 122, descriptor_table_protodef_relation_5finfo_5fbase_2eproto, "relation_info_base.proto", 
  &descriptor_table_relation_5finfo_5fbase_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_relation_5finfo_5fbase_2eproto::offsets,
  file_level_metadata_relation_5finfo_5fbase_2eproto, file_level_enum_descriptors_relation_5finfo_5fbase_2eproto, file_level_service_descriptors_relation_5finfo_5fbase_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_relation_5finfo_5fbase_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_relation_5finfo_5fbase_2eproto);
  return descriptor_table_relation_5finfo_5fbase_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_relation_5finfo_5fbase_2eproto(&descriptor_table_relation_5finfo_5fbase_2eproto);
namespace ssp {

// ===================================================================

class RelationInfoBase::_Internal {
 public:
  using HasBits = decltype(std::declval<RelationInfoBase>()._has_bits_);
  static void set_has_ver(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RelationInfoBase::RelationInfoBase(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  friend_list_(arena),
  black_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ssp.RelationInfoBase)
}
RelationInfoBase::RelationInfoBase(const RelationInfoBase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      friend_list_(from.friend_list_),
      black_list_(from.black_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ver_, &from.ver_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&ver_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:ssp.RelationInfoBase)
}

void RelationInfoBase::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ver_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&ver_)) + sizeof(user_id_));
}

RelationInfoBase::~RelationInfoBase() {
  // @@protoc_insertion_point(destructor:ssp.RelationInfoBase)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RelationInfoBase::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RelationInfoBase::ArenaDtor(void* object) {
  RelationInfoBase* _this = reinterpret_cast< RelationInfoBase* >(object);
  (void)_this;
}
void RelationInfoBase::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RelationInfoBase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RelationInfoBase::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.RelationInfoBase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  friend_list_.Clear();
  black_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&ver_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_id_) -
        reinterpret_cast<char*>(&ver_)) + sizeof(user_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelationInfoBase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 ver = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ver(&has_bits);
          ver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_user_id(&has_bits);
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 friend_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_friend_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_friend_list(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 black_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_black_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_black_list(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RelationInfoBase::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssp.RelationInfoBase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ver = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ver(), target);
  }

  // optional uint32 user_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_user_id(), target);
  }

  // repeated uint32 friend_list = 3;
  for (int i = 0, n = this->_internal_friend_list_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_friend_list(i), target);
  }

  // repeated uint32 black_list = 4;
  for (int i = 0, n = this->_internal_black_list_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_black_list(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.RelationInfoBase)
  return target;
}

size_t RelationInfoBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.RelationInfoBase)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 friend_list = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->friend_list_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_friend_list_size());
    total_size += data_size;
  }

  // repeated uint32 black_list = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->black_list_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_black_list_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 ver = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ver());
    }

    // optional uint32 user_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_user_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelationInfoBase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.RelationInfoBase)
  GOOGLE_DCHECK_NE(&from, this);
  const RelationInfoBase* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RelationInfoBase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.RelationInfoBase)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.RelationInfoBase)
    MergeFrom(*source);
  }
}

void RelationInfoBase::MergeFrom(const RelationInfoBase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.RelationInfoBase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  friend_list_.MergeFrom(from.friend_list_);
  black_list_.MergeFrom(from.black_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ver_ = from.ver_;
    }
    if (cached_has_bits & 0x00000002u) {
      user_id_ = from.user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RelationInfoBase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.RelationInfoBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelationInfoBase::CopyFrom(const RelationInfoBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.RelationInfoBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelationInfoBase::IsInitialized() const {
  return true;
}

void RelationInfoBase::InternalSwap(RelationInfoBase* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  friend_list_.InternalSwap(&other->friend_list_);
  black_list_.InternalSwap(&other->black_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RelationInfoBase, user_id_)
      + sizeof(RelationInfoBase::user_id_)
      - PROTOBUF_FIELD_OFFSET(RelationInfoBase, ver_)>(
          reinterpret_cast<char*>(&ver_),
          reinterpret_cast<char*>(&other->ver_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RelationInfoBase::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ssp
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ssp::RelationInfoBase* Arena::CreateMaybeMessage< ::ssp::RelationInfoBase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssp::RelationInfoBase >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_define.proto

#include "message_define.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace ssp {
constexpr MsgHeader::MsgHeader(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ver_(0u)
  , cmd_type_(0u){}
struct MsgHeaderDefaultTypeInternal {
  constexpr MsgHeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MsgHeaderDefaultTypeInternal() {}
  union {
    MsgHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MsgHeaderDefaultTypeInternal _MsgHeader_default_instance_;
constexpr RegReq::RegReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_(nullptr)
  , from_(0u){}
struct RegReqDefaultTypeInternal {
  constexpr RegReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegReqDefaultTypeInternal() {}
  union {
    RegReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegReqDefaultTypeInternal _RegReq_default_instance_;
constexpr RegRsp::RegRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , ret_(0u)
  , user_id_(0u){}
struct RegRspDefaultTypeInternal {
  constexpr RegRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegRspDefaultTypeInternal() {}
  union {
    RegRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegRspDefaultTypeInternal _RegRsp_default_instance_;
constexpr LoginReq::LoginReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ver_(0u)
  , cmd_type_(0u){}
struct LoginReqDefaultTypeInternal {
  constexpr LoginReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoginReqDefaultTypeInternal() {}
  union {
    LoginReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoginReqDefaultTypeInternal _LoginReq_default_instance_;
constexpr LoginRsp::LoginRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ver_(0u)
  , cmd_type_(0u)
  , ret_(0u)
  , user_id_(0u){}
struct LoginRspDefaultTypeInternal {
  constexpr LoginRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoginRspDefaultTypeInternal() {}
  union {
    LoginRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoginRspDefaultTypeInternal _LoginRsp_default_instance_;
constexpr LogoutReq::LogoutReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(0u){}
struct LogoutReqDefaultTypeInternal {
  constexpr LogoutReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LogoutReqDefaultTypeInternal() {}
  union {
    LogoutReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LogoutReqDefaultTypeInternal _LogoutReq_default_instance_;
constexpr LogoutRsp::LogoutRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ret_(0u){}
struct LogoutRspDefaultTypeInternal {
  constexpr LogoutRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LogoutRspDefaultTypeInternal() {}
  union {
    LogoutRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LogoutRspDefaultTypeInternal _LogoutRsp_default_instance_;
constexpr AddFriendReq::AddFriendReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , user_id_(0u)
  , other_id_(0u){}
struct AddFriendReqDefaultTypeInternal {
  constexpr AddFriendReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddFriendReqDefaultTypeInternal() {}
  union {
    AddFriendReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddFriendReqDefaultTypeInternal _AddFriendReq_default_instance_;
constexpr AddFriendRsp::AddFriendRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , ret_(0u){}
struct AddFriendRspDefaultTypeInternal {
  constexpr AddFriendRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddFriendRspDefaultTypeInternal() {}
  union {
    AddFriendRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddFriendRspDefaultTypeInternal _AddFriendRsp_default_instance_;
constexpr DelFriendReq::DelFriendReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , user_id_(0u)
  , other_id_(0u){}
struct DelFriendReqDefaultTypeInternal {
  constexpr DelFriendReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DelFriendReqDefaultTypeInternal() {}
  union {
    DelFriendReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DelFriendReqDefaultTypeInternal _DelFriendReq_default_instance_;
constexpr DelFriendRsp::DelFriendRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , ret_(0u){}
struct DelFriendRspDefaultTypeInternal {
  constexpr DelFriendRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DelFriendRspDefaultTypeInternal() {}
  union {
    DelFriendRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DelFriendRspDefaultTypeInternal _DelFriendRsp_default_instance_;
constexpr PublishMessageReq::PublishMessageReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : content_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_(nullptr)
  , user_id_(0u){}
struct PublishMessageReqDefaultTypeInternal {
  constexpr PublishMessageReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PublishMessageReqDefaultTypeInternal() {}
  union {
    PublishMessageReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PublishMessageReqDefaultTypeInternal _PublishMessageReq_default_instance_;
constexpr PublishMessageRsp::PublishMessageRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , ret_(0u){}
struct PublishMessageRspDefaultTypeInternal {
  constexpr PublishMessageRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PublishMessageRspDefaultTypeInternal() {}
  union {
    PublishMessageRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PublishMessageRspDefaultTypeInternal _PublishMessageRsp_default_instance_;
constexpr GetMessageListReq::GetMessageListReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , user_id_(0u){}
struct GetMessageListReqDefaultTypeInternal {
  constexpr GetMessageListReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetMessageListReqDefaultTypeInternal() {}
  union {
    GetMessageListReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetMessageListReqDefaultTypeInternal _GetMessageListReq_default_instance_;
constexpr MessageItem::MessageItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : content_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , publisher_id_(0u)
  , publish_time_(0u){}
struct MessageItemDefaultTypeInternal {
  constexpr MessageItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MessageItemDefaultTypeInternal() {}
  union {
    MessageItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MessageItemDefaultTypeInternal _MessageItem_default_instance_;
constexpr GetMessageListRsp::GetMessageListRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_list_()
  , header_(nullptr)
  , ret_(0u){}
struct GetMessageListRspDefaultTypeInternal {
  constexpr GetMessageListRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetMessageListRspDefaultTypeInternal() {}
  union {
    GetMessageListRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetMessageListRspDefaultTypeInternal _GetMessageListRsp_default_instance_;
constexpr GetPhotoReq::GetPhotoReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , user_id_(0u){}
struct GetPhotoReqDefaultTypeInternal {
  constexpr GetPhotoReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetPhotoReqDefaultTypeInternal() {}
  union {
    GetPhotoReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetPhotoReqDefaultTypeInternal _GetPhotoReq_default_instance_;
constexpr GetPhotoRsp::GetPhotoRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , ret_(0u)
  , last_publisher_id_(0u)
  , last_publisher_time_(0u)
  , last_user_get_time_(0u){}
struct GetPhotoRspDefaultTypeInternal {
  constexpr GetPhotoRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetPhotoRspDefaultTypeInternal() {}
  union {
    GetPhotoRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetPhotoRspDefaultTypeInternal _GetPhotoRsp_default_instance_;
constexpr CommonReq::CommonReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , reg_req_(nullptr)
  , login_req_(nullptr)
  , logout_req_(nullptr)
  , add_friend_req_(nullptr)
  , del_friend_req_(nullptr)
  , publish_message_req_(nullptr)
  , get_message_list_req_(nullptr)
  , get_photo_req_(nullptr){}
struct CommonReqDefaultTypeInternal {
  constexpr CommonReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommonReqDefaultTypeInternal() {}
  union {
    CommonReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommonReqDefaultTypeInternal _CommonReq_default_instance_;
constexpr CommonRsp::CommonRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , reg_rsp_(nullptr)
  , login_rsp_(nullptr)
  , logout_rsp_(nullptr)
  , add_friend_rsp_(nullptr)
  , del_friend_rsp_(nullptr)
  , publish_message_rsp_(nullptr)
  , get_message_list_rsp_(nullptr)
  , get_photo_rsp_(nullptr){}
struct CommonRspDefaultTypeInternal {
  constexpr CommonRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommonRspDefaultTypeInternal() {}
  union {
    CommonRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommonRspDefaultTypeInternal _CommonRsp_default_instance_;
constexpr GetUserIdByNameReq::GetUserIdByNameReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_(nullptr){}
struct GetUserIdByNameReqDefaultTypeInternal {
  constexpr GetUserIdByNameReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetUserIdByNameReqDefaultTypeInternal() {}
  union {
    GetUserIdByNameReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetUserIdByNameReqDefaultTypeInternal _GetUserIdByNameReq_default_instance_;
constexpr GetUserIdByNameRsp::GetUserIdByNameRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , ret_(0)
  , user_id_(0){}
struct GetUserIdByNameRspDefaultTypeInternal {
  constexpr GetUserIdByNameRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetUserIdByNameRspDefaultTypeInternal() {}
  union {
    GetUserIdByNameRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetUserIdByNameRspDefaultTypeInternal _GetUserIdByNameRsp_default_instance_;
constexpr CreateUserReq::CreateUserReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_(nullptr)
  , from_(0){}
struct CreateUserReqDefaultTypeInternal {
  constexpr CreateUserReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateUserReqDefaultTypeInternal() {}
  union {
    CreateUserReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateUserReqDefaultTypeInternal _CreateUserReq_default_instance_;
constexpr CreateUserRsp::CreateUserRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , ret_(0)
  , user_id_(0){}
struct CreateUserRspDefaultTypeInternal {
  constexpr CreateUserRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateUserRspDefaultTypeInternal() {}
  union {
    CreateUserRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateUserRspDefaultTypeInternal _CreateUserRsp_default_instance_;
constexpr LoginCheckReq::LoginCheckReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_(nullptr){}
struct LoginCheckReqDefaultTypeInternal {
  constexpr LoginCheckReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoginCheckReqDefaultTypeInternal() {}
  union {
    LoginCheckReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoginCheckReqDefaultTypeInternal _LoginCheckReq_default_instance_;
constexpr LoginCheckRsp::LoginCheckRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , ret_(0)
  , user_id_(0){}
struct LoginCheckRspDefaultTypeInternal {
  constexpr LoginCheckRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoginCheckRspDefaultTypeInternal() {}
  union {
    LoginCheckRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoginCheckRspDefaultTypeInternal _LoginCheckRsp_default_instance_;
constexpr CheckUserExistReq::CheckUserExistReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , user_id_(0){}
struct CheckUserExistReqDefaultTypeInternal {
  constexpr CheckUserExistReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CheckUserExistReqDefaultTypeInternal() {}
  union {
    CheckUserExistReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CheckUserExistReqDefaultTypeInternal _CheckUserExistReq_default_instance_;
constexpr CheckUserExistRsp::CheckUserExistRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , ret_(0){}
struct CheckUserExistRspDefaultTypeInternal {
  constexpr CheckUserExistRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CheckUserExistRspDefaultTypeInternal() {}
  union {
    CheckUserExistRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CheckUserExistRspDefaultTypeInternal _CheckUserExistRsp_default_instance_;
constexpr ServerToUserReq::ServerToUserReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , get_user_id_(nullptr)
  , create_user_(nullptr)
  , login_check_(nullptr)
  , check_user_exist_(nullptr){}
struct ServerToUserReqDefaultTypeInternal {
  constexpr ServerToUserReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerToUserReqDefaultTypeInternal() {}
  union {
    ServerToUserReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerToUserReqDefaultTypeInternal _ServerToUserReq_default_instance_;
constexpr UserToServerRsp::UserToServerRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , get_user_id_(nullptr)
  , create_user_(nullptr)
  , login_check_(nullptr)
  , check_user_exist_(nullptr){}
struct UserToServerRspDefaultTypeInternal {
  constexpr UserToServerRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserToServerRspDefaultTypeInternal() {}
  union {
    UserToServerRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserToServerRspDefaultTypeInternal _UserToServerRsp_default_instance_;
}  // namespace ssp
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_message_5fdefine_2eproto[30];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_message_5fdefine_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_message_5fdefine_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_message_5fdefine_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ssp::MsgHeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssp::MsgHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssp::MsgHeader, ver_),
  PROTOBUF_FIELD_OFFSET(::ssp::MsgHeader, cmd_type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ssp::RegReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssp::RegReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssp::RegReq, header_),
  PROTOBUF_FIELD_OFFSET(::ssp::RegReq, user_name_),
  PROTOBUF_FIELD_OFFSET(::ssp::RegReq, password_),
  PROTOBUF_FIELD_OFFSET(::ssp::RegReq, from_),
  2,
  0,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::ssp::RegRsp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssp::RegRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssp::RegRsp, header_),
  PROTOBUF_FIELD_OFFSET(::ssp::RegRsp, ret_),
  PROTOBUF_FIELD_OFFSET(::ssp::RegRsp, user_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ssp::LoginReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssp::LoginReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssp::LoginReq, ver_),
  PROTOBUF_FIELD_OFFSET(::ssp::LoginReq, cmd_type_),
  PROTOBUF_FIELD_OFFSET(::ssp::LoginReq, user_name_),
  PROTOBUF_FIELD_OFFSET(::ssp::LoginReq, password_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ssp::LoginRsp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssp::LoginRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssp::LoginRsp, ver_),
  PROTOBUF_FIELD_OFFSET(::ssp::LoginRsp, cmd_type_),
  PROTOBUF_FIELD_OFFSET(::ssp::LoginRsp, ret_),
  PROTOBUF_FIELD_OFFSET(::ssp::LoginRsp, user_id_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::ssp::LogoutReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssp::LogoutReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssp::LogoutReq, user_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::ssp::LogoutRsp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssp::LogoutRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssp::LogoutRsp, ret_),
  0,
  PROTOBUF_FIELD_OFFSET(::ssp::AddFriendReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssp::AddFriendReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssp::AddFriendReq, header_),
  PROTOBUF_FIELD_OFFSET(::ssp::AddFriendReq, user_id_),
  PROTOBUF_FIELD_OFFSET(::ssp::AddFriendReq, other_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ssp::AddFriendRsp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssp::AddFriendRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssp::AddFriendRsp, header_),
  PROTOBUF_FIELD_OFFSET(::ssp::AddFriendRsp, ret_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ssp::DelFriendReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssp::DelFriendReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssp::DelFriendReq, header_),
  PROTOBUF_FIELD_OFFSET(::ssp::DelFriendReq, user_id_),
  PROTOBUF_FIELD_OFFSET(::ssp::DelFriendReq, other_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ssp::DelFriendRsp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssp::DelFriendRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssp::DelFriendRsp, header_),
  PROTOBUF_FIELD_OFFSET(::ssp::DelFriendRsp, ret_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ssp::PublishMessageReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssp::PublishMessageReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssp::PublishMessageReq, header_),
  PROTOBUF_FIELD_OFFSET(::ssp::PublishMessageReq, user_id_),
  PROTOBUF_FIELD_OFFSET(::ssp::PublishMessageReq, content_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::ssp::PublishMessageRsp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssp::PublishMessageRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssp::PublishMessageRsp, header_),
  PROTOBUF_FIELD_OFFSET(::ssp::PublishMessageRsp, ret_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ssp::GetMessageListReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssp::GetMessageListReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssp::GetMessageListReq, header_),
  PROTOBUF_FIELD_OFFSET(::ssp::GetMessageListReq, user_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ssp::MessageItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssp::MessageItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssp::MessageItem, publisher_id_),
  PROTOBUF_FIELD_OFFSET(::ssp::MessageItem, publish_time_),
  PROTOBUF_FIELD_OFFSET(::ssp::MessageItem, content_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::ssp::GetMessageListRsp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssp::GetMessageListRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssp::GetMessageListRsp, header_),
  PROTOBUF_FIELD_OFFSET(::ssp::GetMessageListRsp, ret_),
  PROTOBUF_FIELD_OFFSET(::ssp::GetMessageListRsp, message_list_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ssp::GetPhotoReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssp::GetPhotoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssp::GetPhotoReq, header_),
  PROTOBUF_FIELD_OFFSET(::ssp::GetPhotoReq, user_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ssp::GetPhotoRsp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssp::GetPhotoRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssp::GetPhotoRsp, header_),
  PROTOBUF_FIELD_OFFSET(::ssp::GetPhotoRsp, ret_),
  PROTOBUF_FIELD_OFFSET(::ssp::GetPhotoRsp, last_publisher_id_),
  PROTOBUF_FIELD_OFFSET(::ssp::GetPhotoRsp, last_publisher_time_),
  PROTOBUF_FIELD_OFFSET(::ssp::GetPhotoRsp, last_user_get_time_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::ssp::CommonReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssp::CommonReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssp::CommonReq, header_),
  PROTOBUF_FIELD_OFFSET(::ssp::CommonReq, reg_req_),
  PROTOBUF_FIELD_OFFSET(::ssp::CommonReq, login_req_),
  PROTOBUF_FIELD_OFFSET(::ssp::CommonReq, logout_req_),
  PROTOBUF_FIELD_OFFSET(::ssp::CommonReq, add_friend_req_),
  PROTOBUF_FIELD_OFFSET(::ssp::CommonReq, del_friend_req_),
  PROTOBUF_FIELD_OFFSET(::ssp::CommonReq, publish_message_req_),
  PROTOBUF_FIELD_OFFSET(::ssp::CommonReq, get_message_list_req_),
  PROTOBUF_FIELD_OFFSET(::ssp::CommonReq, get_photo_req_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::ssp::CommonRsp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssp::CommonRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssp::CommonRsp, header_),
  PROTOBUF_FIELD_OFFSET(::ssp::CommonRsp, reg_rsp_),
  PROTOBUF_FIELD_OFFSET(::ssp::CommonRsp, login_rsp_),
  PROTOBUF_FIELD_OFFSET(::ssp::CommonRsp, logout_rsp_),
  PROTOBUF_FIELD_OFFSET(::ssp::CommonRsp, add_friend_rsp_),
  PROTOBUF_FIELD_OFFSET(::ssp::CommonRsp, del_friend_rsp_),
  PROTOBUF_FIELD_OFFSET(::ssp::CommonRsp, publish_message_rsp_),
  PROTOBUF_FIELD_OFFSET(::ssp::CommonRsp, get_message_list_rsp_),
  PROTOBUF_FIELD_OFFSET(::ssp::CommonRsp, get_photo_rsp_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::ssp::GetUserIdByNameReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssp::GetUserIdByNameReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssp::GetUserIdByNameReq, header_),
  PROTOBUF_FIELD_OFFSET(::ssp::GetUserIdByNameReq, user_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ssp::GetUserIdByNameRsp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssp::GetUserIdByNameRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssp::GetUserIdByNameRsp, header_),
  PROTOBUF_FIELD_OFFSET(::ssp::GetUserIdByNameRsp, ret_),
  PROTOBUF_FIELD_OFFSET(::ssp::GetUserIdByNameRsp, user_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ssp::CreateUserReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssp::CreateUserReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssp::CreateUserReq, header_),
  PROTOBUF_FIELD_OFFSET(::ssp::CreateUserReq, user_name_),
  PROTOBUF_FIELD_OFFSET(::ssp::CreateUserReq, password_),
  PROTOBUF_FIELD_OFFSET(::ssp::CreateUserReq, from_),
  2,
  0,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::ssp::CreateUserRsp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssp::CreateUserRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssp::CreateUserRsp, header_),
  PROTOBUF_FIELD_OFFSET(::ssp::CreateUserRsp, ret_),
  PROTOBUF_FIELD_OFFSET(::ssp::CreateUserRsp, user_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ssp::LoginCheckReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssp::LoginCheckReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssp::LoginCheckReq, header_),
  PROTOBUF_FIELD_OFFSET(::ssp::LoginCheckReq, user_name_),
  PROTOBUF_FIELD_OFFSET(::ssp::LoginCheckReq, password_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ssp::LoginCheckRsp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssp::LoginCheckRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssp::LoginCheckRsp, header_),
  PROTOBUF_FIELD_OFFSET(::ssp::LoginCheckRsp, ret_),
  PROTOBUF_FIELD_OFFSET(::ssp::LoginCheckRsp, user_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ssp::CheckUserExistReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssp::CheckUserExistReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssp::CheckUserExistReq, header_),
  PROTOBUF_FIELD_OFFSET(::ssp::CheckUserExistReq, user_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ssp::CheckUserExistRsp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssp::CheckUserExistRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssp::CheckUserExistRsp, header_),
  PROTOBUF_FIELD_OFFSET(::ssp::CheckUserExistRsp, ret_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ssp::ServerToUserReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssp::ServerToUserReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssp::ServerToUserReq, header_),
  PROTOBUF_FIELD_OFFSET(::ssp::ServerToUserReq, get_user_id_),
  PROTOBUF_FIELD_OFFSET(::ssp::ServerToUserReq, create_user_),
  PROTOBUF_FIELD_OFFSET(::ssp::ServerToUserReq, login_check_),
  PROTOBUF_FIELD_OFFSET(::ssp::ServerToUserReq, check_user_exist_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::ssp::UserToServerRsp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssp::UserToServerRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssp::UserToServerRsp, header_),
  PROTOBUF_FIELD_OFFSET(::ssp::UserToServerRsp, get_user_id_),
  PROTOBUF_FIELD_OFFSET(::ssp::UserToServerRsp, create_user_),
  PROTOBUF_FIELD_OFFSET(::ssp::UserToServerRsp, login_check_),
  PROTOBUF_FIELD_OFFSET(::ssp::UserToServerRsp, check_user_exist_),
  0,
  1,
  2,
  3,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::ssp::MsgHeader)},
  { 9, 18, sizeof(::ssp::RegReq)},
  { 22, 30, sizeof(::ssp::RegRsp)},
  { 33, 42, sizeof(::ssp::LoginReq)},
  { 46, 55, sizeof(::ssp::LoginRsp)},
  { 59, 65, sizeof(::ssp::LogoutReq)},
  { 66, 72, sizeof(::ssp::LogoutRsp)},
  { 73, 81, sizeof(::ssp::AddFriendReq)},
  { 84, 91, sizeof(::ssp::AddFriendRsp)},
  { 93, 101, sizeof(::ssp::DelFriendReq)},
  { 104, 111, sizeof(::ssp::DelFriendRsp)},
  { 113, 121, sizeof(::ssp::PublishMessageReq)},
  { 124, 131, sizeof(::ssp::PublishMessageRsp)},
  { 133, 140, sizeof(::ssp::GetMessageListReq)},
  { 142, 150, sizeof(::ssp::MessageItem)},
  { 153, 161, sizeof(::ssp::GetMessageListRsp)},
  { 164, 171, sizeof(::ssp::GetPhotoReq)},
  { 173, 183, sizeof(::ssp::GetPhotoRsp)},
  { 188, 202, sizeof(::ssp::CommonReq)},
  { 211, 225, sizeof(::ssp::CommonRsp)},
  { 234, 241, sizeof(::ssp::GetUserIdByNameReq)},
  { 243, 251, sizeof(::ssp::GetUserIdByNameRsp)},
  { 254, 263, sizeof(::ssp::CreateUserReq)},
  { 267, 275, sizeof(::ssp::CreateUserRsp)},
  { 278, 286, sizeof(::ssp::LoginCheckReq)},
  { 289, 297, sizeof(::ssp::LoginCheckRsp)},
  { 300, 307, sizeof(::ssp::CheckUserExistReq)},
  { 309, 316, sizeof(::ssp::CheckUserExistRsp)},
  { 318, 328, sizeof(::ssp::ServerToUserReq)},
  { 333, 343, sizeof(::ssp::UserToServerRsp)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssp::_MsgHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssp::_RegReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssp::_RegRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssp::_LoginReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssp::_LoginRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssp::_LogoutReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssp::_LogoutRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssp::_AddFriendReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssp::_AddFriendRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssp::_DelFriendReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssp::_DelFriendRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssp::_PublishMessageReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssp::_PublishMessageRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssp::_GetMessageListReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssp::_MessageItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssp::_GetMessageListRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssp::_GetPhotoReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssp::_GetPhotoRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssp::_CommonReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssp::_CommonRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssp::_GetUserIdByNameReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssp::_GetUserIdByNameRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssp::_CreateUserReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssp::_CreateUserRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssp::_LoginCheckReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssp::_LoginCheckRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssp::_CheckUserExistReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssp::_CheckUserExistRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssp::_ServerToUserReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssp::_UserToServerRsp_default_instance_),
};

const char descriptor_table_protodef_message_5fdefine_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024message_define.proto\022\003ssp\"*\n\tMsgHeader"
  "\022\013\n\003ver\030\001 \001(\r\022\020\n\010cmd_type\030\002 \001(\r\"[\n\006RegRe"
  "q\022\036\n\006header\030\001 \001(\0132\016.ssp.MsgHeader\022\021\n\tuse"
  "r_name\030\003 \001(\t\022\020\n\010password\030\004 \001(\t\022\014\n\004from\030\005"
  " \001(\r\"F\n\006RegRsp\022\036\n\006header\030\001 \001(\0132\016.ssp.Msg"
  "Header\022\013\n\003ret\030\003 \001(\r\022\017\n\007user_id\030\004 \001(\r\"N\n\010"
  "LoginReq\022\013\n\003ver\030\001 \001(\r\022\020\n\010cmd_type\030\002 \001(\r\022"
  "\021\n\tuser_name\030\003 \001(\t\022\020\n\010password\030\004 \001(\t\"G\n\010"
  "LoginRsp\022\013\n\003ver\030\001 \001(\r\022\020\n\010cmd_type\030\002 \001(\r\022"
  "\013\n\003ret\030\003 \001(\r\022\017\n\007user_id\030\004 \001(\r\"\034\n\tLogoutR"
  "eq\022\017\n\007user_id\030\003 \001(\r\"\030\n\tLogoutRsp\022\013\n\003ret\030"
  "\002 \001(\r\"Q\n\014AddFriendReq\022\036\n\006header\030\001 \001(\0132\016."
  "ssp.MsgHeader\022\017\n\007user_id\030\002 \001(\r\022\020\n\010other_"
  "id\030\003 \001(\r\";\n\014AddFriendRsp\022\036\n\006header\030\001 \001(\013"
  "2\016.ssp.MsgHeader\022\013\n\003ret\030\002 \001(\r\"Q\n\014DelFrie"
  "ndReq\022\036\n\006header\030\001 \001(\0132\016.ssp.MsgHeader\022\017\n"
  "\007user_id\030\002 \001(\r\022\020\n\010other_id\030\003 \001(\r\";\n\014DelF"
  "riendRsp\022\036\n\006header\030\001 \001(\0132\016.ssp.MsgHeader"
  "\022\013\n\003ret\030\002 \001(\r\"U\n\021PublishMessageReq\022\036\n\006he"
  "ader\030\001 \001(\0132\016.ssp.MsgHeader\022\017\n\007user_id\030\002 "
  "\001(\r\022\017\n\007content\030\003 \001(\t\"@\n\021PublishMessageRs"
  "p\022\036\n\006header\030\001 \001(\0132\016.ssp.MsgHeader\022\013\n\003ret"
  "\030\002 \001(\r\"D\n\021GetMessageListReq\022\036\n\006header\030\001 "
  "\001(\0132\016.ssp.MsgHeader\022\017\n\007user_id\030\002 \001(\r\"J\n\013"
  "MessageItem\022\024\n\014publisher_id\030\001 \001(\r\022\024\n\014pub"
  "lish_time\030\002 \001(\r\022\017\n\007content\030\003 \001(\t\"h\n\021GetM"
  "essageListRsp\022\036\n\006header\030\001 \001(\0132\016.ssp.MsgH"
  "eader\022\013\n\003ret\030\002 \001(\r\022&\n\014message_list\030\003 \003(\013"
  "2\020.ssp.MessageItem\">\n\013GetPhotoReq\022\036\n\006hea"
  "der\030\001 \001(\0132\016.ssp.MsgHeader\022\017\n\007user_id\030\002 \001"
  "(\r\"\216\001\n\013GetPhotoRsp\022\036\n\006header\030\001 \001(\0132\016.ssp"
  ".MsgHeader\022\013\n\003ret\030\002 \001(\r\022\031\n\021last_publishe"
  "r_id\030\003 \001(\r\022\033\n\023last_publisher_time\030\004 \001(\r\022"
  "\032\n\022last_user_get_time\030\005 \001(\r\"\371\002\n\tCommonRe"
  "q\022\036\n\006header\030\001 \001(\0132\016.ssp.MsgHeader\022\034\n\007reg"
  "_req\030\002 \001(\0132\013.ssp.RegReq\022 \n\tlogin_req\030\003 \001"
  "(\0132\r.ssp.LoginReq\022\"\n\nlogout_req\030\004 \001(\0132\016."
  "ssp.LogoutReq\022)\n\016add_friend_req\030\005 \001(\0132\021."
  "ssp.AddFriendReq\022)\n\016del_friend_req\030\006 \001(\013"
  "2\021.ssp.DelFriendReq\0223\n\023publish_message_r"
  "eq\030\007 \001(\0132\026.ssp.PublishMessageReq\0224\n\024get_"
  "message_list_req\030\010 \001(\0132\026.ssp.GetMessageL"
  "istReq\022\'\n\rget_photo_req\030\t \001(\0132\020.ssp.GetP"
  "hotoReq\"\371\002\n\tCommonRsp\022\036\n\006header\030\001 \001(\0132\016."
  "ssp.MsgHeader\022\034\n\007reg_rsp\030\002 \001(\0132\013.ssp.Reg"
  "Rsp\022 \n\tlogin_rsp\030\003 \001(\0132\r.ssp.LoginRsp\022\"\n"
  "\nlogout_rsp\030\004 \001(\0132\016.ssp.LogoutRsp\022)\n\016add"
  "_friend_rsp\030\005 \001(\0132\021.ssp.AddFriendRsp\022)\n\016"
  "del_friend_rsp\030\006 \001(\0132\021.ssp.DelFriendRsp\022"
  "3\n\023publish_message_rsp\030\007 \001(\0132\026.ssp.Publi"
  "shMessageRsp\0224\n\024get_message_list_rsp\030\010 \001"
  "(\0132\026.ssp.GetMessageListRsp\022\'\n\rget_photo_"
  "rsp\030\t \001(\0132\020.ssp.GetPhotoRsp\"G\n\022GetUserId"
  "ByNameReq\022\036\n\006header\030\001 \001(\0132\016.ssp.MsgHeade"
  "r\022\021\n\tuser_name\030\002 \001(\t\"R\n\022GetUserIdByNameR"
  "sp\022\036\n\006header\030\001 \001(\0132\016.ssp.MsgHeader\022\013\n\003re"
  "t\030\002 \001(\005\022\017\n\007user_id\030\003 \001(\005\"b\n\rCreateUserRe"
  "q\022\036\n\006header\030\001 \001(\0132\016.ssp.MsgHeader\022\021\n\tuse"
  "r_name\030\002 \001(\t\022\020\n\010password\030\003 \001(\t\022\014\n\004from\030\004"
  " \001(\005\"M\n\rCreateUserRsp\022\036\n\006header\030\001 \001(\0132\016."
  "ssp.MsgHeader\022\013\n\003ret\030\002 \001(\005\022\017\n\007user_id\030\003 "
  "\001(\005\"T\n\rLoginCheckReq\022\036\n\006header\030\001 \001(\0132\016.s"
  "sp.MsgHeader\022\021\n\tuser_name\030\002 \001(\t\022\020\n\010passw"
  "ord\030\003 \001(\t\"M\n\rLoginCheckRsp\022\036\n\006header\030\001 \001"
  "(\0132\016.ssp.MsgHeader\022\013\n\003ret\030\002 \001(\005\022\017\n\007user_"
  "id\030\003 \001(\005\"D\n\021CheckUserExistReq\022\036\n\006header\030"
  "\001 \001(\0132\016.ssp.MsgHeader\022\017\n\007user_id\030\002 \001(\005\"@"
  "\n\021CheckUserExistRsp\022\036\n\006header\030\001 \001(\0132\016.ss"
  "p.MsgHeader\022\013\n\003ret\030\002 \001(\005\"\343\001\n\017ServerToUse"
  "rReq\022\036\n\006header\030\001 \001(\0132\016.ssp.MsgHeader\022,\n\013"
  "get_user_id\030\002 \001(\0132\027.ssp.GetUserIdByNameR"
  "eq\022\'\n\013create_user\030\003 \001(\0132\022.ssp.CreateUser"
  "Req\022\'\n\013login_check\030\004 \001(\0132\022.ssp.LoginChec"
  "kReq\0220\n\020check_user_exist\030\005 \001(\0132\026.ssp.Che"
  "ckUserExistReq\"\343\001\n\017UserToServerRsp\022\036\n\006he"
  "ader\030\001 \001(\0132\016.ssp.MsgHeader\022,\n\013get_user_i"
  "d\030\002 \001(\0132\027.ssp.GetUserIdByNameRsp\022\'\n\013crea"
  "te_user\030\003 \001(\0132\022.ssp.CreateUserRsp\022\'\n\013log"
  "in_check\030\004 \001(\0132\022.ssp.LoginCheckRsp\0220\n\020ch"
  "eck_user_exist\030\005 \001(\0132\026.ssp.CheckUserExis"
  "tRsp"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_message_5fdefine_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_5fdefine_2eproto = {
  false, false, 3204, descriptor_table_protodef_message_5fdefine_2eproto, "message_define.proto", 
  &descriptor_table_message_5fdefine_2eproto_once, nullptr, 0, 30,
  schemas, file_default_instances, TableStruct_message_5fdefine_2eproto::offsets,
  file_level_metadata_message_5fdefine_2eproto, file_level_enum_descriptors_message_5fdefine_2eproto, file_level_service_descriptors_message_5fdefine_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_message_5fdefine_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_5fdefine_2eproto);
  return descriptor_table_message_5fdefine_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_message_5fdefine_2eproto(&descriptor_table_message_5fdefine_2eproto);
namespace ssp {

// ===================================================================

class MsgHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<MsgHeader>()._has_bits_);
  static void set_has_ver(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cmd_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MsgHeader::MsgHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ssp.MsgHeader)
}
MsgHeader::MsgHeader(const MsgHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ver_, &from.ver_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_type_) -
    reinterpret_cast<char*>(&ver_)) + sizeof(cmd_type_));
  // @@protoc_insertion_point(copy_constructor:ssp.MsgHeader)
}

void MsgHeader::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ver_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cmd_type_) -
    reinterpret_cast<char*>(&ver_)) + sizeof(cmd_type_));
}

MsgHeader::~MsgHeader() {
  // @@protoc_insertion_point(destructor:ssp.MsgHeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgHeader::ArenaDtor(void* object) {
  MsgHeader* _this = reinterpret_cast< MsgHeader* >(object);
  (void)_this;
}
void MsgHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MsgHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.MsgHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&ver_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cmd_type_) -
        reinterpret_cast<char*>(&ver_)) + sizeof(cmd_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 ver = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ver(&has_bits);
          ver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cmd_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_cmd_type(&has_bits);
          cmd_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssp.MsgHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ver = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ver(), target);
  }

  // optional uint32 cmd_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cmd_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.MsgHeader)
  return target;
}

size_t MsgHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.MsgHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 ver = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ver());
    }

    // optional uint32 cmd_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cmd_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.MsgHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.MsgHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.MsgHeader)
    MergeFrom(*source);
  }
}

void MsgHeader::MergeFrom(const MsgHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.MsgHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ver_ = from.ver_;
    }
    if (cached_has_bits & 0x00000002u) {
      cmd_type_ = from.cmd_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MsgHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.MsgHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgHeader::CopyFrom(const MsgHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.MsgHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgHeader::IsInitialized() const {
  return true;
}

void MsgHeader::InternalSwap(MsgHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgHeader, cmd_type_)
      + sizeof(MsgHeader::cmd_type_)
      - PROTOBUF_FIELD_OFFSET(MsgHeader, ver_)>(
          reinterpret_cast<char*>(&ver_),
          reinterpret_cast<char*>(&other->ver_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RegReq::_Internal {
 public:
  using HasBits = decltype(std::declval<RegReq>()._has_bits_);
  static const ::ssp::MsgHeader& header(const RegReq* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_password(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_from(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::ssp::MsgHeader&
RegReq::_Internal::header(const RegReq* msg) {
  return *msg->header_;
}
RegReq::RegReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ssp.RegReq)
}
RegReq::RegReq(const RegReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_name()) {
    user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_name(), 
      GetArena());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_password()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  from_ = from.from_;
  // @@protoc_insertion_point(copy_constructor:ssp.RegReq)
}

void RegReq::SharedCtor() {
user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&from_) -
    reinterpret_cast<char*>(&header_)) + sizeof(from_));
}

RegReq::~RegReq() {
  // @@protoc_insertion_point(destructor:ssp.RegReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void RegReq::ArenaDtor(void* object) {
  RegReq* _this = reinterpret_cast< RegReq* >(object);
  (void)_this;
}
void RegReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.RegReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      user_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      password_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
  }
  from_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ssp.MsgHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssp.RegReq.user_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string password = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssp.RegReq.password");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 from = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_from(&has_bits);
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssp.RegReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional string user_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssp.RegReq.user_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_name(), target);
  }

  // optional string password = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssp.RegReq.password");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_password(), target);
  }

  // optional uint32 from = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_from(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.RegReq)
  return target;
}

size_t RegReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.RegReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string user_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_name());
    }

    // optional string password = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_password());
    }

    // optional .ssp.MsgHeader header = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional uint32 from = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_from());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.RegReq)
  GOOGLE_DCHECK_NE(&from, this);
  const RegReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.RegReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.RegReq)
    MergeFrom(*source);
  }
}

void RegReq::MergeFrom(const RegReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.RegReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_user_name(from._internal_user_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_password(from._internal_password());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_header()->::ssp::MsgHeader::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000008u) {
      from_ = from.from_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RegReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.RegReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegReq::CopyFrom(const RegReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.RegReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegReq::IsInitialized() const {
  return true;
}

void RegReq::InternalSwap(RegReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  user_name_.Swap(&other->user_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegReq, from_)
      + sizeof(RegReq::from_)
      - PROTOBUF_FIELD_OFFSET(RegReq, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RegRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<RegRsp>()._has_bits_);
  static const ::ssp::MsgHeader& header(const RegRsp* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ssp::MsgHeader&
RegRsp::_Internal::header(const RegRsp* msg) {
  return *msg->header_;
}
RegRsp::RegRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ssp.RegRsp)
}
RegRsp::RegRsp(const RegRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&ret_, &from.ret_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&ret_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:ssp.RegRsp)
}

void RegRsp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&header_)) + sizeof(user_id_));
}

RegRsp::~RegRsp() {
  // @@protoc_insertion_point(destructor:ssp.RegRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void RegRsp::ArenaDtor(void* object) {
  RegRsp* _this = reinterpret_cast< RegRsp* >(object);
  (void)_this;
}
void RegRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.RegRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&ret_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_id_) -
        reinterpret_cast<char*>(&ret_)) + sizeof(user_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ssp.MsgHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ret = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_user_id(&has_bits);
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssp.RegRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional uint32 ret = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ret(), target);
  }

  // optional uint32 user_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.RegRsp)
  return target;
}

size_t RegRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.RegRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .ssp.MsgHeader header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional uint32 ret = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ret());
    }

    // optional uint32 user_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_user_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.RegRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const RegRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.RegRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.RegRsp)
    MergeFrom(*source);
  }
}

void RegRsp::MergeFrom(const RegRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.RegRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::ssp::MsgHeader::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      ret_ = from.ret_;
    }
    if (cached_has_bits & 0x00000004u) {
      user_id_ = from.user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RegRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.RegRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegRsp::CopyFrom(const RegRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.RegRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegRsp::IsInitialized() const {
  return true;
}

void RegRsp::InternalSwap(RegRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegRsp, user_id_)
      + sizeof(RegRsp::user_id_)
      - PROTOBUF_FIELD_OFFSET(RegRsp, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LoginReq::_Internal {
 public:
  using HasBits = decltype(std::declval<LoginReq>()._has_bits_);
  static void set_has_ver(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cmd_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_user_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_password(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LoginReq::LoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ssp.LoginReq)
}
LoginReq::LoginReq(const LoginReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_name()) {
    user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_name(), 
      GetArena());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_password()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArena());
  }
  ::memcpy(&ver_, &from.ver_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_type_) -
    reinterpret_cast<char*>(&ver_)) + sizeof(cmd_type_));
  // @@protoc_insertion_point(copy_constructor:ssp.LoginReq)
}

void LoginReq::SharedCtor() {
user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ver_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cmd_type_) -
    reinterpret_cast<char*>(&ver_)) + sizeof(cmd_type_));
}

LoginReq::~LoginReq() {
  // @@protoc_insertion_point(destructor:ssp.LoginReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoginReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginReq::ArenaDtor(void* object) {
  LoginReq* _this = reinterpret_cast< LoginReq* >(object);
  (void)_this;
}
void LoginReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.LoginReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      user_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      password_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&ver_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cmd_type_) -
        reinterpret_cast<char*>(&ver_)) + sizeof(cmd_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 ver = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ver(&has_bits);
          ver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cmd_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_cmd_type(&has_bits);
          cmd_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssp.LoginReq.user_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string password = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssp.LoginReq.password");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssp.LoginReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ver = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ver(), target);
  }

  // optional uint32 cmd_type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cmd_type(), target);
  }

  // optional string user_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssp.LoginReq.user_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_name(), target);
  }

  // optional string password = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssp.LoginReq.password");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.LoginReq)
  return target;
}

size_t LoginReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.LoginReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string user_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_name());
    }

    // optional string password = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_password());
    }

    // optional uint32 ver = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ver());
    }

    // optional uint32 cmd_type = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cmd_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.LoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.LoginReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.LoginReq)
    MergeFrom(*source);
  }
}

void LoginReq::MergeFrom(const LoginReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.LoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_user_name(from._internal_user_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_password(from._internal_password());
    }
    if (cached_has_bits & 0x00000004u) {
      ver_ = from.ver_;
    }
    if (cached_has_bits & 0x00000008u) {
      cmd_type_ = from.cmd_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LoginReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.LoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginReq::CopyFrom(const LoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.LoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginReq::IsInitialized() const {
  return true;
}

void LoginReq::InternalSwap(LoginReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  user_name_.Swap(&other->user_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoginReq, cmd_type_)
      + sizeof(LoginReq::cmd_type_)
      - PROTOBUF_FIELD_OFFSET(LoginReq, ver_)>(
          reinterpret_cast<char*>(&ver_),
          reinterpret_cast<char*>(&other->ver_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LoginRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<LoginRsp>()._has_bits_);
  static void set_has_ver(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cmd_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

LoginRsp::LoginRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ssp.LoginRsp)
}
LoginRsp::LoginRsp(const LoginRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ver_, &from.ver_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&ver_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:ssp.LoginRsp)
}

void LoginRsp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ver_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&ver_)) + sizeof(user_id_));
}

LoginRsp::~LoginRsp() {
  // @@protoc_insertion_point(destructor:ssp.LoginRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoginRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LoginRsp::ArenaDtor(void* object) {
  LoginRsp* _this = reinterpret_cast< LoginRsp* >(object);
  (void)_this;
}
void LoginRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoginRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.LoginRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&ver_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_id_) -
        reinterpret_cast<char*>(&ver_)) + sizeof(user_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 ver = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ver(&has_bits);
          ver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cmd_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_cmd_type(&has_bits);
          cmd_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ret = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_user_id(&has_bits);
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssp.LoginRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ver = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ver(), target);
  }

  // optional uint32 cmd_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cmd_type(), target);
  }

  // optional uint32 ret = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ret(), target);
  }

  // optional uint32 user_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.LoginRsp)
  return target;
}

size_t LoginRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.LoginRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 ver = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ver());
    }

    // optional uint32 cmd_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cmd_type());
    }

    // optional uint32 ret = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ret());
    }

    // optional uint32 user_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_user_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.LoginRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.LoginRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.LoginRsp)
    MergeFrom(*source);
  }
}

void LoginRsp::MergeFrom(const LoginRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.LoginRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ver_ = from.ver_;
    }
    if (cached_has_bits & 0x00000002u) {
      cmd_type_ = from.cmd_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      ret_ = from.ret_;
    }
    if (cached_has_bits & 0x00000008u) {
      user_id_ = from.user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LoginRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.LoginRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRsp::CopyFrom(const LoginRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.LoginRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRsp::IsInitialized() const {
  return true;
}

void LoginRsp::InternalSwap(LoginRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoginRsp, user_id_)
      + sizeof(LoginRsp::user_id_)
      - PROTOBUF_FIELD_OFFSET(LoginRsp, ver_)>(
          reinterpret_cast<char*>(&ver_),
          reinterpret_cast<char*>(&other->ver_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LogoutReq::_Internal {
 public:
  using HasBits = decltype(std::declval<LogoutReq>()._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LogoutReq::LogoutReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ssp.LogoutReq)
}
LogoutReq::LogoutReq(const LogoutReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:ssp.LogoutReq)
}

void LogoutReq::SharedCtor() {
user_id_ = 0u;
}

LogoutReq::~LogoutReq() {
  // @@protoc_insertion_point(destructor:ssp.LogoutReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogoutReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LogoutReq::ArenaDtor(void* object) {
  LogoutReq* _this = reinterpret_cast< LogoutReq* >(object);
  (void)_this;
}
void LogoutReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogoutReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LogoutReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.LogoutReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogoutReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_user_id(&has_bits);
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogoutReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssp.LogoutReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 user_id = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.LogoutReq)
  return target;
}

size_t LogoutReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.LogoutReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 user_id = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogoutReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.LogoutReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LogoutReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogoutReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.LogoutReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.LogoutReq)
    MergeFrom(*source);
  }
}

void LogoutReq::MergeFrom(const LogoutReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.LogoutReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_id()) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void LogoutReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.LogoutReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutReq::CopyFrom(const LogoutReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.LogoutReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutReq::IsInitialized() const {
  return true;
}

void LogoutReq::InternalSwap(LogoutReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogoutReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LogoutRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<LogoutRsp>()._has_bits_);
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LogoutRsp::LogoutRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ssp.LogoutRsp)
}
LogoutRsp::LogoutRsp(const LogoutRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:ssp.LogoutRsp)
}

void LogoutRsp::SharedCtor() {
ret_ = 0u;
}

LogoutRsp::~LogoutRsp() {
  // @@protoc_insertion_point(destructor:ssp.LogoutRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogoutRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LogoutRsp::ArenaDtor(void* object) {
  LogoutRsp* _this = reinterpret_cast< LogoutRsp* >(object);
  (void)_this;
}
void LogoutRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogoutRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LogoutRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.LogoutRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ret_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogoutRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 ret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogoutRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssp.LogoutRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ret = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.LogoutRsp)
  return target;
}

size_t LogoutRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.LogoutRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 ret = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogoutRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.LogoutRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const LogoutRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogoutRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.LogoutRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.LogoutRsp)
    MergeFrom(*source);
  }
}

void LogoutRsp::MergeFrom(const LogoutRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.LogoutRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ret()) {
    _internal_set_ret(from._internal_ret());
  }
}

void LogoutRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.LogoutRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutRsp::CopyFrom(const LogoutRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.LogoutRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutRsp::IsInitialized() const {
  return true;
}

void LogoutRsp::InternalSwap(LogoutRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogoutRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddFriendReq::_Internal {
 public:
  using HasBits = decltype(std::declval<AddFriendReq>()._has_bits_);
  static const ::ssp::MsgHeader& header(const AddFriendReq* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_other_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ssp::MsgHeader&
AddFriendReq::_Internal::header(const AddFriendReq* msg) {
  return *msg->header_;
}
AddFriendReq::AddFriendReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ssp.AddFriendReq)
}
AddFriendReq::AddFriendReq(const AddFriendReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&other_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(other_id_));
  // @@protoc_insertion_point(copy_constructor:ssp.AddFriendReq)
}

void AddFriendReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&other_id_) -
    reinterpret_cast<char*>(&header_)) + sizeof(other_id_));
}

AddFriendReq::~AddFriendReq() {
  // @@protoc_insertion_point(destructor:ssp.AddFriendReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddFriendReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void AddFriendReq::ArenaDtor(void* object) {
  AddFriendReq* _this = reinterpret_cast< AddFriendReq* >(object);
  (void)_this;
}
void AddFriendReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddFriendReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddFriendReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.AddFriendReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&user_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&other_id_) -
        reinterpret_cast<char*>(&user_id_)) + sizeof(other_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddFriendReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ssp.MsgHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_user_id(&has_bits);
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 other_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_other_id(&has_bits);
          other_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddFriendReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssp.AddFriendReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional uint32 user_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_user_id(), target);
  }

  // optional uint32 other_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_other_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.AddFriendReq)
  return target;
}

size_t AddFriendReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.AddFriendReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .ssp.MsgHeader header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional uint32 user_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_user_id());
    }

    // optional uint32 other_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_other_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddFriendReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.AddFriendReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AddFriendReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddFriendReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.AddFriendReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.AddFriendReq)
    MergeFrom(*source);
  }
}

void AddFriendReq::MergeFrom(const AddFriendReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.AddFriendReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::ssp::MsgHeader::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      other_id_ = from.other_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AddFriendReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.AddFriendReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFriendReq::CopyFrom(const AddFriendReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.AddFriendReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFriendReq::IsInitialized() const {
  return true;
}

void AddFriendReq::InternalSwap(AddFriendReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddFriendReq, other_id_)
      + sizeof(AddFriendReq::other_id_)
      - PROTOBUF_FIELD_OFFSET(AddFriendReq, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddFriendReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddFriendRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<AddFriendRsp>()._has_bits_);
  static const ::ssp::MsgHeader& header(const AddFriendRsp* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ssp::MsgHeader&
AddFriendRsp::_Internal::header(const AddFriendRsp* msg) {
  return *msg->header_;
}
AddFriendRsp::AddFriendRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ssp.AddFriendRsp)
}
AddFriendRsp::AddFriendRsp(const AddFriendRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:ssp.AddFriendRsp)
}

void AddFriendRsp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&header_)) + sizeof(ret_));
}

AddFriendRsp::~AddFriendRsp() {
  // @@protoc_insertion_point(destructor:ssp.AddFriendRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddFriendRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void AddFriendRsp::ArenaDtor(void* object) {
  AddFriendRsp* _this = reinterpret_cast< AddFriendRsp* >(object);
  (void)_this;
}
void AddFriendRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddFriendRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddFriendRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.AddFriendRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  ret_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddFriendRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ssp.MsgHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddFriendRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssp.AddFriendRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional uint32 ret = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.AddFriendRsp)
  return target;
}

size_t AddFriendRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.AddFriendRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ssp.MsgHeader header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional uint32 ret = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ret());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddFriendRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.AddFriendRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const AddFriendRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddFriendRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.AddFriendRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.AddFriendRsp)
    MergeFrom(*source);
  }
}

void AddFriendRsp::MergeFrom(const AddFriendRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.AddFriendRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::ssp::MsgHeader::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AddFriendRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.AddFriendRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFriendRsp::CopyFrom(const AddFriendRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.AddFriendRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFriendRsp::IsInitialized() const {
  return true;
}

void AddFriendRsp::InternalSwap(AddFriendRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddFriendRsp, ret_)
      + sizeof(AddFriendRsp::ret_)
      - PROTOBUF_FIELD_OFFSET(AddFriendRsp, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddFriendRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DelFriendReq::_Internal {
 public:
  using HasBits = decltype(std::declval<DelFriendReq>()._has_bits_);
  static const ::ssp::MsgHeader& header(const DelFriendReq* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_other_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ssp::MsgHeader&
DelFriendReq::_Internal::header(const DelFriendReq* msg) {
  return *msg->header_;
}
DelFriendReq::DelFriendReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ssp.DelFriendReq)
}
DelFriendReq::DelFriendReq(const DelFriendReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&other_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(other_id_));
  // @@protoc_insertion_point(copy_constructor:ssp.DelFriendReq)
}

void DelFriendReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&other_id_) -
    reinterpret_cast<char*>(&header_)) + sizeof(other_id_));
}

DelFriendReq::~DelFriendReq() {
  // @@protoc_insertion_point(destructor:ssp.DelFriendReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DelFriendReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void DelFriendReq::ArenaDtor(void* object) {
  DelFriendReq* _this = reinterpret_cast< DelFriendReq* >(object);
  (void)_this;
}
void DelFriendReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DelFriendReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DelFriendReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.DelFriendReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&user_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&other_id_) -
        reinterpret_cast<char*>(&user_id_)) + sizeof(other_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DelFriendReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ssp.MsgHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_user_id(&has_bits);
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 other_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_other_id(&has_bits);
          other_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DelFriendReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssp.DelFriendReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional uint32 user_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_user_id(), target);
  }

  // optional uint32 other_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_other_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.DelFriendReq)
  return target;
}

size_t DelFriendReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.DelFriendReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .ssp.MsgHeader header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional uint32 user_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_user_id());
    }

    // optional uint32 other_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_other_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DelFriendReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.DelFriendReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DelFriendReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DelFriendReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.DelFriendReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.DelFriendReq)
    MergeFrom(*source);
  }
}

void DelFriendReq::MergeFrom(const DelFriendReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.DelFriendReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::ssp::MsgHeader::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      other_id_ = from.other_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DelFriendReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.DelFriendReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelFriendReq::CopyFrom(const DelFriendReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.DelFriendReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelFriendReq::IsInitialized() const {
  return true;
}

void DelFriendReq::InternalSwap(DelFriendReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DelFriendReq, other_id_)
      + sizeof(DelFriendReq::other_id_)
      - PROTOBUF_FIELD_OFFSET(DelFriendReq, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DelFriendReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DelFriendRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<DelFriendRsp>()._has_bits_);
  static const ::ssp::MsgHeader& header(const DelFriendRsp* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ssp::MsgHeader&
DelFriendRsp::_Internal::header(const DelFriendRsp* msg) {
  return *msg->header_;
}
DelFriendRsp::DelFriendRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ssp.DelFriendRsp)
}
DelFriendRsp::DelFriendRsp(const DelFriendRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:ssp.DelFriendRsp)
}

void DelFriendRsp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&header_)) + sizeof(ret_));
}

DelFriendRsp::~DelFriendRsp() {
  // @@protoc_insertion_point(destructor:ssp.DelFriendRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DelFriendRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void DelFriendRsp::ArenaDtor(void* object) {
  DelFriendRsp* _this = reinterpret_cast< DelFriendRsp* >(object);
  (void)_this;
}
void DelFriendRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DelFriendRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DelFriendRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.DelFriendRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  ret_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DelFriendRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ssp.MsgHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DelFriendRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssp.DelFriendRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional uint32 ret = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.DelFriendRsp)
  return target;
}

size_t DelFriendRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.DelFriendRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ssp.MsgHeader header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional uint32 ret = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ret());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DelFriendRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.DelFriendRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DelFriendRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DelFriendRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.DelFriendRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.DelFriendRsp)
    MergeFrom(*source);
  }
}

void DelFriendRsp::MergeFrom(const DelFriendRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.DelFriendRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::ssp::MsgHeader::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DelFriendRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.DelFriendRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelFriendRsp::CopyFrom(const DelFriendRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.DelFriendRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelFriendRsp::IsInitialized() const {
  return true;
}

void DelFriendRsp::InternalSwap(DelFriendRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DelFriendRsp, ret_)
      + sizeof(DelFriendRsp::ret_)
      - PROTOBUF_FIELD_OFFSET(DelFriendRsp, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DelFriendRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PublishMessageReq::_Internal {
 public:
  using HasBits = decltype(std::declval<PublishMessageReq>()._has_bits_);
  static const ::ssp::MsgHeader& header(const PublishMessageReq* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_content(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ssp::MsgHeader&
PublishMessageReq::_Internal::header(const PublishMessageReq* msg) {
  return *msg->header_;
}
PublishMessageReq::PublishMessageReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ssp.PublishMessageReq)
}
PublishMessageReq::PublishMessageReq(const PublishMessageReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_content()) {
    content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content(), 
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:ssp.PublishMessageReq)
}

void PublishMessageReq::SharedCtor() {
content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&header_)) + sizeof(user_id_));
}

PublishMessageReq::~PublishMessageReq() {
  // @@protoc_insertion_point(destructor:ssp.PublishMessageReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublishMessageReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void PublishMessageReq::ArenaDtor(void* object) {
  PublishMessageReq* _this = reinterpret_cast< PublishMessageReq* >(object);
  (void)_this;
}
void PublishMessageReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishMessageReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PublishMessageReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.PublishMessageReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      content_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
  }
  user_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishMessageReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ssp.MsgHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_user_id(&has_bits);
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssp.PublishMessageReq.content");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublishMessageReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssp.PublishMessageReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional uint32 user_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_user_id(), target);
  }

  // optional string content = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssp.PublishMessageReq.content");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.PublishMessageReq)
  return target;
}

size_t PublishMessageReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.PublishMessageReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string content = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_content());
    }

    // optional .ssp.MsgHeader header = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional uint32 user_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_user_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishMessageReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.PublishMessageReq)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishMessageReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublishMessageReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.PublishMessageReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.PublishMessageReq)
    MergeFrom(*source);
  }
}

void PublishMessageReq::MergeFrom(const PublishMessageReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.PublishMessageReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_content(from._internal_content());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_header()->::ssp::MsgHeader::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000004u) {
      user_id_ = from.user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PublishMessageReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.PublishMessageReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishMessageReq::CopyFrom(const PublishMessageReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.PublishMessageReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishMessageReq::IsInitialized() const {
  return true;
}

void PublishMessageReq::InternalSwap(PublishMessageReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublishMessageReq, user_id_)
      + sizeof(PublishMessageReq::user_id_)
      - PROTOBUF_FIELD_OFFSET(PublishMessageReq, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishMessageReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PublishMessageRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<PublishMessageRsp>()._has_bits_);
  static const ::ssp::MsgHeader& header(const PublishMessageRsp* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ssp::MsgHeader&
PublishMessageRsp::_Internal::header(const PublishMessageRsp* msg) {
  return *msg->header_;
}
PublishMessageRsp::PublishMessageRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ssp.PublishMessageRsp)
}
PublishMessageRsp::PublishMessageRsp(const PublishMessageRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:ssp.PublishMessageRsp)
}

void PublishMessageRsp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&header_)) + sizeof(ret_));
}

PublishMessageRsp::~PublishMessageRsp() {
  // @@protoc_insertion_point(destructor:ssp.PublishMessageRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublishMessageRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void PublishMessageRsp::ArenaDtor(void* object) {
  PublishMessageRsp* _this = reinterpret_cast< PublishMessageRsp* >(object);
  (void)_this;
}
void PublishMessageRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishMessageRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PublishMessageRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.PublishMessageRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  ret_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishMessageRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ssp.MsgHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublishMessageRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssp.PublishMessageRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional uint32 ret = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.PublishMessageRsp)
  return target;
}

size_t PublishMessageRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.PublishMessageRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ssp.MsgHeader header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional uint32 ret = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ret());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishMessageRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.PublishMessageRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishMessageRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublishMessageRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.PublishMessageRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.PublishMessageRsp)
    MergeFrom(*source);
  }
}

void PublishMessageRsp::MergeFrom(const PublishMessageRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.PublishMessageRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::ssp::MsgHeader::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PublishMessageRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.PublishMessageRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishMessageRsp::CopyFrom(const PublishMessageRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.PublishMessageRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishMessageRsp::IsInitialized() const {
  return true;
}

void PublishMessageRsp::InternalSwap(PublishMessageRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublishMessageRsp, ret_)
      + sizeof(PublishMessageRsp::ret_)
      - PROTOBUF_FIELD_OFFSET(PublishMessageRsp, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishMessageRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetMessageListReq::_Internal {
 public:
  using HasBits = decltype(std::declval<GetMessageListReq>()._has_bits_);
  static const ::ssp::MsgHeader& header(const GetMessageListReq* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ssp::MsgHeader&
GetMessageListReq::_Internal::header(const GetMessageListReq* msg) {
  return *msg->header_;
}
GetMessageListReq::GetMessageListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ssp.GetMessageListReq)
}
GetMessageListReq::GetMessageListReq(const GetMessageListReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:ssp.GetMessageListReq)
}

void GetMessageListReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&header_)) + sizeof(user_id_));
}

GetMessageListReq::~GetMessageListReq() {
  // @@protoc_insertion_point(destructor:ssp.GetMessageListReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetMessageListReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void GetMessageListReq::ArenaDtor(void* object) {
  GetMessageListReq* _this = reinterpret_cast< GetMessageListReq* >(object);
  (void)_this;
}
void GetMessageListReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetMessageListReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetMessageListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.GetMessageListReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  user_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMessageListReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ssp.MsgHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_user_id(&has_bits);
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMessageListReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssp.GetMessageListReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional uint32 user_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.GetMessageListReq)
  return target;
}

size_t GetMessageListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.GetMessageListReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ssp.MsgHeader header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional uint32 user_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_user_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMessageListReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.GetMessageListReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMessageListReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMessageListReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.GetMessageListReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.GetMessageListReq)
    MergeFrom(*source);
  }
}

void GetMessageListReq::MergeFrom(const GetMessageListReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.GetMessageListReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::ssp::MsgHeader::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      user_id_ = from.user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetMessageListReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.GetMessageListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMessageListReq::CopyFrom(const GetMessageListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.GetMessageListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMessageListReq::IsInitialized() const {
  return true;
}

void GetMessageListReq::InternalSwap(GetMessageListReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetMessageListReq, user_id_)
      + sizeof(GetMessageListReq::user_id_)
      - PROTOBUF_FIELD_OFFSET(GetMessageListReq, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMessageListReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MessageItem::_Internal {
 public:
  using HasBits = decltype(std::declval<MessageItem>()._has_bits_);
  static void set_has_publisher_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_publish_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_content(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MessageItem::MessageItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ssp.MessageItem)
}
MessageItem::MessageItem(const MessageItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_content()) {
    content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content(), 
      GetArena());
  }
  ::memcpy(&publisher_id_, &from.publisher_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&publish_time_) -
    reinterpret_cast<char*>(&publisher_id_)) + sizeof(publish_time_));
  // @@protoc_insertion_point(copy_constructor:ssp.MessageItem)
}

void MessageItem::SharedCtor() {
content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&publisher_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&publish_time_) -
    reinterpret_cast<char*>(&publisher_id_)) + sizeof(publish_time_));
}

MessageItem::~MessageItem() {
  // @@protoc_insertion_point(destructor:ssp.MessageItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MessageItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MessageItem::ArenaDtor(void* object) {
  MessageItem* _this = reinterpret_cast< MessageItem* >(object);
  (void)_this;
}
void MessageItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MessageItem::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.MessageItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    content_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&publisher_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&publish_time_) -
        reinterpret_cast<char*>(&publisher_id_)) + sizeof(publish_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 publisher_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_publisher_id(&has_bits);
          publisher_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 publish_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_publish_time(&has_bits);
          publish_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssp.MessageItem.content");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssp.MessageItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 publisher_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_publisher_id(), target);
  }

  // optional uint32 publish_time = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_publish_time(), target);
  }

  // optional string content = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssp.MessageItem.content");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.MessageItem)
  return target;
}

size_t MessageItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.MessageItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string content = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_content());
    }

    // optional uint32 publisher_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_publisher_id());
    }

    // optional uint32 publish_time = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_publish_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.MessageItem)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.MessageItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.MessageItem)
    MergeFrom(*source);
  }
}

void MessageItem::MergeFrom(const MessageItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.MessageItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_content(from._internal_content());
    }
    if (cached_has_bits & 0x00000002u) {
      publisher_id_ = from.publisher_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      publish_time_ = from.publish_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MessageItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.MessageItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageItem::CopyFrom(const MessageItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.MessageItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageItem::IsInitialized() const {
  return true;
}

void MessageItem::InternalSwap(MessageItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageItem, publish_time_)
      + sizeof(MessageItem::publish_time_)
      - PROTOBUF_FIELD_OFFSET(MessageItem, publisher_id_)>(
          reinterpret_cast<char*>(&publisher_id_),
          reinterpret_cast<char*>(&other->publisher_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetMessageListRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<GetMessageListRsp>()._has_bits_);
  static const ::ssp::MsgHeader& header(const GetMessageListRsp* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ssp::MsgHeader&
GetMessageListRsp::_Internal::header(const GetMessageListRsp* msg) {
  return *msg->header_;
}
GetMessageListRsp::GetMessageListRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  message_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ssp.GetMessageListRsp)
}
GetMessageListRsp::GetMessageListRsp(const GetMessageListRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      message_list_(from.message_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:ssp.GetMessageListRsp)
}

void GetMessageListRsp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&header_)) + sizeof(ret_));
}

GetMessageListRsp::~GetMessageListRsp() {
  // @@protoc_insertion_point(destructor:ssp.GetMessageListRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetMessageListRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void GetMessageListRsp::ArenaDtor(void* object) {
  GetMessageListRsp* _this = reinterpret_cast< GetMessageListRsp* >(object);
  (void)_this;
}
void GetMessageListRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetMessageListRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetMessageListRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.GetMessageListRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  ret_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMessageListRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ssp.MsgHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ssp.MessageItem message_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_message_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMessageListRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssp.GetMessageListRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional uint32 ret = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ret(), target);
  }

  // repeated .ssp.MessageItem message_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_message_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_message_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.GetMessageListRsp)
  return target;
}

size_t GetMessageListRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.GetMessageListRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ssp.MessageItem message_list = 3;
  total_size += 1UL * this->_internal_message_list_size();
  for (const auto& msg : this->message_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ssp.MsgHeader header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional uint32 ret = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ret());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMessageListRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.GetMessageListRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMessageListRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMessageListRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.GetMessageListRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.GetMessageListRsp)
    MergeFrom(*source);
  }
}

void GetMessageListRsp::MergeFrom(const GetMessageListRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.GetMessageListRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  message_list_.MergeFrom(from.message_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::ssp::MsgHeader::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetMessageListRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.GetMessageListRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMessageListRsp::CopyFrom(const GetMessageListRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.GetMessageListRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMessageListRsp::IsInitialized() const {
  return true;
}

void GetMessageListRsp::InternalSwap(GetMessageListRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_list_.InternalSwap(&other->message_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetMessageListRsp, ret_)
      + sizeof(GetMessageListRsp::ret_)
      - PROTOBUF_FIELD_OFFSET(GetMessageListRsp, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMessageListRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetPhotoReq::_Internal {
 public:
  using HasBits = decltype(std::declval<GetPhotoReq>()._has_bits_);
  static const ::ssp::MsgHeader& header(const GetPhotoReq* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ssp::MsgHeader&
GetPhotoReq::_Internal::header(const GetPhotoReq* msg) {
  return *msg->header_;
}
GetPhotoReq::GetPhotoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ssp.GetPhotoReq)
}
GetPhotoReq::GetPhotoReq(const GetPhotoReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:ssp.GetPhotoReq)
}

void GetPhotoReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&header_)) + sizeof(user_id_));
}

GetPhotoReq::~GetPhotoReq() {
  // @@protoc_insertion_point(destructor:ssp.GetPhotoReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetPhotoReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void GetPhotoReq::ArenaDtor(void* object) {
  GetPhotoReq* _this = reinterpret_cast< GetPhotoReq* >(object);
  (void)_this;
}
void GetPhotoReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPhotoReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetPhotoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.GetPhotoReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  user_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPhotoReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ssp.MsgHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_user_id(&has_bits);
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPhotoReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssp.GetPhotoReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional uint32 user_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.GetPhotoReq)
  return target;
}

size_t GetPhotoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.GetPhotoReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ssp.MsgHeader header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional uint32 user_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_user_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPhotoReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.GetPhotoReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPhotoReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPhotoReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.GetPhotoReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.GetPhotoReq)
    MergeFrom(*source);
  }
}

void GetPhotoReq::MergeFrom(const GetPhotoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.GetPhotoReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::ssp::MsgHeader::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      user_id_ = from.user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetPhotoReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.GetPhotoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPhotoReq::CopyFrom(const GetPhotoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.GetPhotoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPhotoReq::IsInitialized() const {
  return true;
}

void GetPhotoReq::InternalSwap(GetPhotoReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetPhotoReq, user_id_)
      + sizeof(GetPhotoReq::user_id_)
      - PROTOBUF_FIELD_OFFSET(GetPhotoReq, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPhotoReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetPhotoRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<GetPhotoRsp>()._has_bits_);
  static const ::ssp::MsgHeader& header(const GetPhotoRsp* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_last_publisher_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_last_publisher_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_last_user_get_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::ssp::MsgHeader&
GetPhotoRsp::_Internal::header(const GetPhotoRsp* msg) {
  return *msg->header_;
}
GetPhotoRsp::GetPhotoRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ssp.GetPhotoRsp)
}
GetPhotoRsp::GetPhotoRsp(const GetPhotoRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&ret_, &from.ret_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_user_get_time_) -
    reinterpret_cast<char*>(&ret_)) + sizeof(last_user_get_time_));
  // @@protoc_insertion_point(copy_constructor:ssp.GetPhotoRsp)
}

void GetPhotoRsp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&last_user_get_time_) -
    reinterpret_cast<char*>(&header_)) + sizeof(last_user_get_time_));
}

GetPhotoRsp::~GetPhotoRsp() {
  // @@protoc_insertion_point(destructor:ssp.GetPhotoRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetPhotoRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void GetPhotoRsp::ArenaDtor(void* object) {
  GetPhotoRsp* _this = reinterpret_cast< GetPhotoRsp* >(object);
  (void)_this;
}
void GetPhotoRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPhotoRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetPhotoRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.GetPhotoRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&ret_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_user_get_time_) -
        reinterpret_cast<char*>(&ret_)) + sizeof(last_user_get_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPhotoRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ssp.MsgHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 last_publisher_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_last_publisher_id(&has_bits);
          last_publisher_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 last_publisher_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_last_publisher_time(&has_bits);
          last_publisher_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 last_user_get_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_last_user_get_time(&has_bits);
          last_user_get_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPhotoRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssp.GetPhotoRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional uint32 ret = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ret(), target);
  }

  // optional uint32 last_publisher_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_last_publisher_id(), target);
  }

  // optional uint32 last_publisher_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_last_publisher_time(), target);
  }

  // optional uint32 last_user_get_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_last_user_get_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.GetPhotoRsp)
  return target;
}

size_t GetPhotoRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.GetPhotoRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .ssp.MsgHeader header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional uint32 ret = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ret());
    }

    // optional uint32 last_publisher_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_last_publisher_id());
    }

    // optional uint32 last_publisher_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_last_publisher_time());
    }

    // optional uint32 last_user_get_time = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_last_user_get_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPhotoRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.GetPhotoRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPhotoRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPhotoRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.GetPhotoRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.GetPhotoRsp)
    MergeFrom(*source);
  }
}

void GetPhotoRsp::MergeFrom(const GetPhotoRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.GetPhotoRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::ssp::MsgHeader::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      ret_ = from.ret_;
    }
    if (cached_has_bits & 0x00000004u) {
      last_publisher_id_ = from.last_publisher_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      last_publisher_time_ = from.last_publisher_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      last_user_get_time_ = from.last_user_get_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetPhotoRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.GetPhotoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPhotoRsp::CopyFrom(const GetPhotoRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.GetPhotoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPhotoRsp::IsInitialized() const {
  return true;
}

void GetPhotoRsp::InternalSwap(GetPhotoRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetPhotoRsp, last_user_get_time_)
      + sizeof(GetPhotoRsp::last_user_get_time_)
      - PROTOBUF_FIELD_OFFSET(GetPhotoRsp, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPhotoRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CommonReq::_Internal {
 public:
  using HasBits = decltype(std::declval<CommonReq>()._has_bits_);
  static const ::ssp::MsgHeader& header(const CommonReq* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ssp::RegReq& reg_req(const CommonReq* msg);
  static void set_has_reg_req(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ssp::LoginReq& login_req(const CommonReq* msg);
  static void set_has_login_req(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ssp::LogoutReq& logout_req(const CommonReq* msg);
  static void set_has_logout_req(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ssp::AddFriendReq& add_friend_req(const CommonReq* msg);
  static void set_has_add_friend_req(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::ssp::DelFriendReq& del_friend_req(const CommonReq* msg);
  static void set_has_del_friend_req(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::ssp::PublishMessageReq& publish_message_req(const CommonReq* msg);
  static void set_has_publish_message_req(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::ssp::GetMessageListReq& get_message_list_req(const CommonReq* msg);
  static void set_has_get_message_list_req(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::ssp::GetPhotoReq& get_photo_req(const CommonReq* msg);
  static void set_has_get_photo_req(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::ssp::MsgHeader&
CommonReq::_Internal::header(const CommonReq* msg) {
  return *msg->header_;
}
const ::ssp::RegReq&
CommonReq::_Internal::reg_req(const CommonReq* msg) {
  return *msg->reg_req_;
}
const ::ssp::LoginReq&
CommonReq::_Internal::login_req(const CommonReq* msg) {
  return *msg->login_req_;
}
const ::ssp::LogoutReq&
CommonReq::_Internal::logout_req(const CommonReq* msg) {
  return *msg->logout_req_;
}
const ::ssp::AddFriendReq&
CommonReq::_Internal::add_friend_req(const CommonReq* msg) {
  return *msg->add_friend_req_;
}
const ::ssp::DelFriendReq&
CommonReq::_Internal::del_friend_req(const CommonReq* msg) {
  return *msg->del_friend_req_;
}
const ::ssp::PublishMessageReq&
CommonReq::_Internal::publish_message_req(const CommonReq* msg) {
  return *msg->publish_message_req_;
}
const ::ssp::GetMessageListReq&
CommonReq::_Internal::get_message_list_req(const CommonReq* msg) {
  return *msg->get_message_list_req_;
}
const ::ssp::GetPhotoReq&
CommonReq::_Internal::get_photo_req(const CommonReq* msg) {
  return *msg->get_photo_req_;
}
CommonReq::CommonReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ssp.CommonReq)
}
CommonReq::CommonReq(const CommonReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_reg_req()) {
    reg_req_ = new ::ssp::RegReq(*from.reg_req_);
  } else {
    reg_req_ = nullptr;
  }
  if (from._internal_has_login_req()) {
    login_req_ = new ::ssp::LoginReq(*from.login_req_);
  } else {
    login_req_ = nullptr;
  }
  if (from._internal_has_logout_req()) {
    logout_req_ = new ::ssp::LogoutReq(*from.logout_req_);
  } else {
    logout_req_ = nullptr;
  }
  if (from._internal_has_add_friend_req()) {
    add_friend_req_ = new ::ssp::AddFriendReq(*from.add_friend_req_);
  } else {
    add_friend_req_ = nullptr;
  }
  if (from._internal_has_del_friend_req()) {
    del_friend_req_ = new ::ssp::DelFriendReq(*from.del_friend_req_);
  } else {
    del_friend_req_ = nullptr;
  }
  if (from._internal_has_publish_message_req()) {
    publish_message_req_ = new ::ssp::PublishMessageReq(*from.publish_message_req_);
  } else {
    publish_message_req_ = nullptr;
  }
  if (from._internal_has_get_message_list_req()) {
    get_message_list_req_ = new ::ssp::GetMessageListReq(*from.get_message_list_req_);
  } else {
    get_message_list_req_ = nullptr;
  }
  if (from._internal_has_get_photo_req()) {
    get_photo_req_ = new ::ssp::GetPhotoReq(*from.get_photo_req_);
  } else {
    get_photo_req_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssp.CommonReq)
}

void CommonReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&get_photo_req_) -
    reinterpret_cast<char*>(&header_)) + sizeof(get_photo_req_));
}

CommonReq::~CommonReq() {
  // @@protoc_insertion_point(destructor:ssp.CommonReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommonReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete reg_req_;
  if (this != internal_default_instance()) delete login_req_;
  if (this != internal_default_instance()) delete logout_req_;
  if (this != internal_default_instance()) delete add_friend_req_;
  if (this != internal_default_instance()) delete del_friend_req_;
  if (this != internal_default_instance()) delete publish_message_req_;
  if (this != internal_default_instance()) delete get_message_list_req_;
  if (this != internal_default_instance()) delete get_photo_req_;
}

void CommonReq::ArenaDtor(void* object) {
  CommonReq* _this = reinterpret_cast< CommonReq* >(object);
  (void)_this;
}
void CommonReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommonReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommonReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.CommonReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(reg_req_ != nullptr);
      reg_req_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(login_req_ != nullptr);
      login_req_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(logout_req_ != nullptr);
      logout_req_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(add_friend_req_ != nullptr);
      add_friend_req_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(del_friend_req_ != nullptr);
      del_friend_req_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(publish_message_req_ != nullptr);
      publish_message_req_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(get_message_list_req_ != nullptr);
      get_message_list_req_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(get_photo_req_ != nullptr);
    get_photo_req_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommonReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ssp.MsgHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssp.RegReq reg_req = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_reg_req(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssp.LoginReq login_req = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_login_req(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssp.LogoutReq logout_req = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_logout_req(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssp.AddFriendReq add_friend_req = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_friend_req(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssp.DelFriendReq del_friend_req = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_del_friend_req(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssp.PublishMessageReq publish_message_req = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_publish_message_req(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssp.GetMessageListReq get_message_list_req = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_message_list_req(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssp.GetPhotoReq get_photo_req = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_photo_req(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommonReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssp.CommonReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional .ssp.RegReq reg_req = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::reg_req(this), target, stream);
  }

  // optional .ssp.LoginReq login_req = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::login_req(this), target, stream);
  }

  // optional .ssp.LogoutReq logout_req = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::logout_req(this), target, stream);
  }

  // optional .ssp.AddFriendReq add_friend_req = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::add_friend_req(this), target, stream);
  }

  // optional .ssp.DelFriendReq del_friend_req = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::del_friend_req(this), target, stream);
  }

  // optional .ssp.PublishMessageReq publish_message_req = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::publish_message_req(this), target, stream);
  }

  // optional .ssp.GetMessageListReq get_message_list_req = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::get_message_list_req(this), target, stream);
  }

  // optional .ssp.GetPhotoReq get_photo_req = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::get_photo_req(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.CommonReq)
  return target;
}

size_t CommonReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.CommonReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .ssp.MsgHeader header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .ssp.RegReq reg_req = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reg_req_);
    }

    // optional .ssp.LoginReq login_req = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *login_req_);
    }

    // optional .ssp.LogoutReq logout_req = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *logout_req_);
    }

    // optional .ssp.AddFriendReq add_friend_req = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *add_friend_req_);
    }

    // optional .ssp.DelFriendReq del_friend_req = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *del_friend_req_);
    }

    // optional .ssp.PublishMessageReq publish_message_req = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *publish_message_req_);
    }

    // optional .ssp.GetMessageListReq get_message_list_req = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *get_message_list_req_);
    }

  }
  // optional .ssp.GetPhotoReq get_photo_req = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *get_photo_req_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommonReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.CommonReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommonReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.CommonReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.CommonReq)
    MergeFrom(*source);
  }
}

void CommonReq::MergeFrom(const CommonReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.CommonReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::ssp::MsgHeader::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_reg_req()->::ssp::RegReq::MergeFrom(from._internal_reg_req());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_login_req()->::ssp::LoginReq::MergeFrom(from._internal_login_req());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_logout_req()->::ssp::LogoutReq::MergeFrom(from._internal_logout_req());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_add_friend_req()->::ssp::AddFriendReq::MergeFrom(from._internal_add_friend_req());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_del_friend_req()->::ssp::DelFriendReq::MergeFrom(from._internal_del_friend_req());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_publish_message_req()->::ssp::PublishMessageReq::MergeFrom(from._internal_publish_message_req());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_get_message_list_req()->::ssp::GetMessageListReq::MergeFrom(from._internal_get_message_list_req());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_mutable_get_photo_req()->::ssp::GetPhotoReq::MergeFrom(from._internal_get_photo_req());
  }
}

void CommonReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.CommonReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonReq::CopyFrom(const CommonReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.CommonReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonReq::IsInitialized() const {
  return true;
}

void CommonReq::InternalSwap(CommonReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommonReq, get_photo_req_)
      + sizeof(CommonReq::get_photo_req_)
      - PROTOBUF_FIELD_OFFSET(CommonReq, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CommonRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<CommonRsp>()._has_bits_);
  static const ::ssp::MsgHeader& header(const CommonRsp* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ssp::RegRsp& reg_rsp(const CommonRsp* msg);
  static void set_has_reg_rsp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ssp::LoginRsp& login_rsp(const CommonRsp* msg);
  static void set_has_login_rsp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ssp::LogoutRsp& logout_rsp(const CommonRsp* msg);
  static void set_has_logout_rsp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ssp::AddFriendRsp& add_friend_rsp(const CommonRsp* msg);
  static void set_has_add_friend_rsp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::ssp::DelFriendRsp& del_friend_rsp(const CommonRsp* msg);
  static void set_has_del_friend_rsp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::ssp::PublishMessageRsp& publish_message_rsp(const CommonRsp* msg);
  static void set_has_publish_message_rsp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::ssp::GetMessageListRsp& get_message_list_rsp(const CommonRsp* msg);
  static void set_has_get_message_list_rsp(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::ssp::GetPhotoRsp& get_photo_rsp(const CommonRsp* msg);
  static void set_has_get_photo_rsp(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::ssp::MsgHeader&
CommonRsp::_Internal::header(const CommonRsp* msg) {
  return *msg->header_;
}
const ::ssp::RegRsp&
CommonRsp::_Internal::reg_rsp(const CommonRsp* msg) {
  return *msg->reg_rsp_;
}
const ::ssp::LoginRsp&
CommonRsp::_Internal::login_rsp(const CommonRsp* msg) {
  return *msg->login_rsp_;
}
const ::ssp::LogoutRsp&
CommonRsp::_Internal::logout_rsp(const CommonRsp* msg) {
  return *msg->logout_rsp_;
}
const ::ssp::AddFriendRsp&
CommonRsp::_Internal::add_friend_rsp(const CommonRsp* msg) {
  return *msg->add_friend_rsp_;
}
const ::ssp::DelFriendRsp&
CommonRsp::_Internal::del_friend_rsp(const CommonRsp* msg) {
  return *msg->del_friend_rsp_;
}
const ::ssp::PublishMessageRsp&
CommonRsp::_Internal::publish_message_rsp(const CommonRsp* msg) {
  return *msg->publish_message_rsp_;
}
const ::ssp::GetMessageListRsp&
CommonRsp::_Internal::get_message_list_rsp(const CommonRsp* msg) {
  return *msg->get_message_list_rsp_;
}
const ::ssp::GetPhotoRsp&
CommonRsp::_Internal::get_photo_rsp(const CommonRsp* msg) {
  return *msg->get_photo_rsp_;
}
CommonRsp::CommonRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ssp.CommonRsp)
}
CommonRsp::CommonRsp(const CommonRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_reg_rsp()) {
    reg_rsp_ = new ::ssp::RegRsp(*from.reg_rsp_);
  } else {
    reg_rsp_ = nullptr;
  }
  if (from._internal_has_login_rsp()) {
    login_rsp_ = new ::ssp::LoginRsp(*from.login_rsp_);
  } else {
    login_rsp_ = nullptr;
  }
  if (from._internal_has_logout_rsp()) {
    logout_rsp_ = new ::ssp::LogoutRsp(*from.logout_rsp_);
  } else {
    logout_rsp_ = nullptr;
  }
  if (from._internal_has_add_friend_rsp()) {
    add_friend_rsp_ = new ::ssp::AddFriendRsp(*from.add_friend_rsp_);
  } else {
    add_friend_rsp_ = nullptr;
  }
  if (from._internal_has_del_friend_rsp()) {
    del_friend_rsp_ = new ::ssp::DelFriendRsp(*from.del_friend_rsp_);
  } else {
    del_friend_rsp_ = nullptr;
  }
  if (from._internal_has_publish_message_rsp()) {
    publish_message_rsp_ = new ::ssp::PublishMessageRsp(*from.publish_message_rsp_);
  } else {
    publish_message_rsp_ = nullptr;
  }
  if (from._internal_has_get_message_list_rsp()) {
    get_message_list_rsp_ = new ::ssp::GetMessageListRsp(*from.get_message_list_rsp_);
  } else {
    get_message_list_rsp_ = nullptr;
  }
  if (from._internal_has_get_photo_rsp()) {
    get_photo_rsp_ = new ::ssp::GetPhotoRsp(*from.get_photo_rsp_);
  } else {
    get_photo_rsp_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssp.CommonRsp)
}

void CommonRsp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&get_photo_rsp_) -
    reinterpret_cast<char*>(&header_)) + sizeof(get_photo_rsp_));
}

CommonRsp::~CommonRsp() {
  // @@protoc_insertion_point(destructor:ssp.CommonRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommonRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete reg_rsp_;
  if (this != internal_default_instance()) delete login_rsp_;
  if (this != internal_default_instance()) delete logout_rsp_;
  if (this != internal_default_instance()) delete add_friend_rsp_;
  if (this != internal_default_instance()) delete del_friend_rsp_;
  if (this != internal_default_instance()) delete publish_message_rsp_;
  if (this != internal_default_instance()) delete get_message_list_rsp_;
  if (this != internal_default_instance()) delete get_photo_rsp_;
}

void CommonRsp::ArenaDtor(void* object) {
  CommonRsp* _this = reinterpret_cast< CommonRsp* >(object);
  (void)_this;
}
void CommonRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommonRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommonRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.CommonRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(reg_rsp_ != nullptr);
      reg_rsp_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(login_rsp_ != nullptr);
      login_rsp_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(logout_rsp_ != nullptr);
      logout_rsp_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(add_friend_rsp_ != nullptr);
      add_friend_rsp_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(del_friend_rsp_ != nullptr);
      del_friend_rsp_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(publish_message_rsp_ != nullptr);
      publish_message_rsp_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(get_message_list_rsp_ != nullptr);
      get_message_list_rsp_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(get_photo_rsp_ != nullptr);
    get_photo_rsp_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommonRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ssp.MsgHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssp.RegRsp reg_rsp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_reg_rsp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssp.LoginRsp login_rsp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_login_rsp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssp.LogoutRsp logout_rsp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_logout_rsp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssp.AddFriendRsp add_friend_rsp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_friend_rsp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssp.DelFriendRsp del_friend_rsp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_del_friend_rsp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssp.PublishMessageRsp publish_message_rsp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_publish_message_rsp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssp.GetMessageListRsp get_message_list_rsp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_message_list_rsp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssp.GetPhotoRsp get_photo_rsp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_photo_rsp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommonRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssp.CommonRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional .ssp.RegRsp reg_rsp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::reg_rsp(this), target, stream);
  }

  // optional .ssp.LoginRsp login_rsp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::login_rsp(this), target, stream);
  }

  // optional .ssp.LogoutRsp logout_rsp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::logout_rsp(this), target, stream);
  }

  // optional .ssp.AddFriendRsp add_friend_rsp = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::add_friend_rsp(this), target, stream);
  }

  // optional .ssp.DelFriendRsp del_friend_rsp = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::del_friend_rsp(this), target, stream);
  }

  // optional .ssp.PublishMessageRsp publish_message_rsp = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::publish_message_rsp(this), target, stream);
  }

  // optional .ssp.GetMessageListRsp get_message_list_rsp = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::get_message_list_rsp(this), target, stream);
  }

  // optional .ssp.GetPhotoRsp get_photo_rsp = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::get_photo_rsp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.CommonRsp)
  return target;
}

size_t CommonRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.CommonRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .ssp.MsgHeader header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .ssp.RegRsp reg_rsp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reg_rsp_);
    }

    // optional .ssp.LoginRsp login_rsp = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *login_rsp_);
    }

    // optional .ssp.LogoutRsp logout_rsp = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *logout_rsp_);
    }

    // optional .ssp.AddFriendRsp add_friend_rsp = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *add_friend_rsp_);
    }

    // optional .ssp.DelFriendRsp del_friend_rsp = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *del_friend_rsp_);
    }

    // optional .ssp.PublishMessageRsp publish_message_rsp = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *publish_message_rsp_);
    }

    // optional .ssp.GetMessageListRsp get_message_list_rsp = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *get_message_list_rsp_);
    }

  }
  // optional .ssp.GetPhotoRsp get_photo_rsp = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *get_photo_rsp_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommonRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.CommonRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommonRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.CommonRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.CommonRsp)
    MergeFrom(*source);
  }
}

void CommonRsp::MergeFrom(const CommonRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.CommonRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::ssp::MsgHeader::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_reg_rsp()->::ssp::RegRsp::MergeFrom(from._internal_reg_rsp());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_login_rsp()->::ssp::LoginRsp::MergeFrom(from._internal_login_rsp());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_logout_rsp()->::ssp::LogoutRsp::MergeFrom(from._internal_logout_rsp());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_add_friend_rsp()->::ssp::AddFriendRsp::MergeFrom(from._internal_add_friend_rsp());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_del_friend_rsp()->::ssp::DelFriendRsp::MergeFrom(from._internal_del_friend_rsp());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_publish_message_rsp()->::ssp::PublishMessageRsp::MergeFrom(from._internal_publish_message_rsp());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_get_message_list_rsp()->::ssp::GetMessageListRsp::MergeFrom(from._internal_get_message_list_rsp());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_mutable_get_photo_rsp()->::ssp::GetPhotoRsp::MergeFrom(from._internal_get_photo_rsp());
  }
}

void CommonRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.CommonRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonRsp::CopyFrom(const CommonRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.CommonRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonRsp::IsInitialized() const {
  return true;
}

void CommonRsp::InternalSwap(CommonRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommonRsp, get_photo_rsp_)
      + sizeof(CommonRsp::get_photo_rsp_)
      - PROTOBUF_FIELD_OFFSET(CommonRsp, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetUserIdByNameReq::_Internal {
 public:
  using HasBits = decltype(std::declval<GetUserIdByNameReq>()._has_bits_);
  static const ::ssp::MsgHeader& header(const GetUserIdByNameReq* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_user_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ssp::MsgHeader&
GetUserIdByNameReq::_Internal::header(const GetUserIdByNameReq* msg) {
  return *msg->header_;
}
GetUserIdByNameReq::GetUserIdByNameReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ssp.GetUserIdByNameReq)
}
GetUserIdByNameReq::GetUserIdByNameReq(const GetUserIdByNameReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_name()) {
    user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_name(), 
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssp.GetUserIdByNameReq)
}

void GetUserIdByNameReq::SharedCtor() {
user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
header_ = nullptr;
}

GetUserIdByNameReq::~GetUserIdByNameReq() {
  // @@protoc_insertion_point(destructor:ssp.GetUserIdByNameReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetUserIdByNameReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void GetUserIdByNameReq::ArenaDtor(void* object) {
  GetUserIdByNameReq* _this = reinterpret_cast< GetUserIdByNameReq* >(object);
  (void)_this;
}
void GetUserIdByNameReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetUserIdByNameReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetUserIdByNameReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.GetUserIdByNameReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      user_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetUserIdByNameReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ssp.MsgHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssp.GetUserIdByNameReq.user_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetUserIdByNameReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssp.GetUserIdByNameReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional string user_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssp.GetUserIdByNameReq.user_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.GetUserIdByNameReq)
  return target;
}

size_t GetUserIdByNameReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.GetUserIdByNameReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string user_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_name());
    }

    // optional .ssp.MsgHeader header = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetUserIdByNameReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.GetUserIdByNameReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetUserIdByNameReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetUserIdByNameReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.GetUserIdByNameReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.GetUserIdByNameReq)
    MergeFrom(*source);
  }
}

void GetUserIdByNameReq::MergeFrom(const GetUserIdByNameReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.GetUserIdByNameReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_user_name(from._internal_user_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_header()->::ssp::MsgHeader::MergeFrom(from._internal_header());
    }
  }
}

void GetUserIdByNameReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.GetUserIdByNameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserIdByNameReq::CopyFrom(const GetUserIdByNameReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.GetUserIdByNameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserIdByNameReq::IsInitialized() const {
  return true;
}

void GetUserIdByNameReq::InternalSwap(GetUserIdByNameReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  user_name_.Swap(&other->user_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUserIdByNameReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetUserIdByNameRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<GetUserIdByNameRsp>()._has_bits_);
  static const ::ssp::MsgHeader& header(const GetUserIdByNameRsp* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ssp::MsgHeader&
GetUserIdByNameRsp::_Internal::header(const GetUserIdByNameRsp* msg) {
  return *msg->header_;
}
GetUserIdByNameRsp::GetUserIdByNameRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ssp.GetUserIdByNameRsp)
}
GetUserIdByNameRsp::GetUserIdByNameRsp(const GetUserIdByNameRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&ret_, &from.ret_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&ret_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:ssp.GetUserIdByNameRsp)
}

void GetUserIdByNameRsp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&header_)) + sizeof(user_id_));
}

GetUserIdByNameRsp::~GetUserIdByNameRsp() {
  // @@protoc_insertion_point(destructor:ssp.GetUserIdByNameRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetUserIdByNameRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void GetUserIdByNameRsp::ArenaDtor(void* object) {
  GetUserIdByNameRsp* _this = reinterpret_cast< GetUserIdByNameRsp* >(object);
  (void)_this;
}
void GetUserIdByNameRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetUserIdByNameRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetUserIdByNameRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.GetUserIdByNameRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&ret_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_id_) -
        reinterpret_cast<char*>(&ret_)) + sizeof(user_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetUserIdByNameRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ssp.MsgHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_user_id(&has_bits);
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetUserIdByNameRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssp.GetUserIdByNameRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional int32 ret = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ret(), target);
  }

  // optional int32 user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.GetUserIdByNameRsp)
  return target;
}

size_t GetUserIdByNameRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.GetUserIdByNameRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .ssp.MsgHeader header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional int32 ret = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ret());
    }

    // optional int32 user_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_user_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetUserIdByNameRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.GetUserIdByNameRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetUserIdByNameRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetUserIdByNameRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.GetUserIdByNameRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.GetUserIdByNameRsp)
    MergeFrom(*source);
  }
}

void GetUserIdByNameRsp::MergeFrom(const GetUserIdByNameRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.GetUserIdByNameRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::ssp::MsgHeader::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      ret_ = from.ret_;
    }
    if (cached_has_bits & 0x00000004u) {
      user_id_ = from.user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetUserIdByNameRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.GetUserIdByNameRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserIdByNameRsp::CopyFrom(const GetUserIdByNameRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.GetUserIdByNameRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserIdByNameRsp::IsInitialized() const {
  return true;
}

void GetUserIdByNameRsp::InternalSwap(GetUserIdByNameRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetUserIdByNameRsp, user_id_)
      + sizeof(GetUserIdByNameRsp::user_id_)
      - PROTOBUF_FIELD_OFFSET(GetUserIdByNameRsp, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUserIdByNameRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CreateUserReq::_Internal {
 public:
  using HasBits = decltype(std::declval<CreateUserReq>()._has_bits_);
  static const ::ssp::MsgHeader& header(const CreateUserReq* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_password(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_from(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::ssp::MsgHeader&
CreateUserReq::_Internal::header(const CreateUserReq* msg) {
  return *msg->header_;
}
CreateUserReq::CreateUserReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ssp.CreateUserReq)
}
CreateUserReq::CreateUserReq(const CreateUserReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_name()) {
    user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_name(), 
      GetArena());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_password()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  from_ = from.from_;
  // @@protoc_insertion_point(copy_constructor:ssp.CreateUserReq)
}

void CreateUserReq::SharedCtor() {
user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&from_) -
    reinterpret_cast<char*>(&header_)) + sizeof(from_));
}

CreateUserReq::~CreateUserReq() {
  // @@protoc_insertion_point(destructor:ssp.CreateUserReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateUserReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void CreateUserReq::ArenaDtor(void* object) {
  CreateUserReq* _this = reinterpret_cast< CreateUserReq* >(object);
  (void)_this;
}
void CreateUserReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateUserReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateUserReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.CreateUserReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      user_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      password_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
  }
  from_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateUserReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ssp.MsgHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssp.CreateUserReq.user_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssp.CreateUserReq.password");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 from = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_from(&has_bits);
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateUserReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssp.CreateUserReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional string user_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssp.CreateUserReq.user_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_name(), target);
  }

  // optional string password = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssp.CreateUserReq.password");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_password(), target);
  }

  // optional int32 from = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_from(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.CreateUserReq)
  return target;
}

size_t CreateUserReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.CreateUserReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string user_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_name());
    }

    // optional string password = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_password());
    }

    // optional .ssp.MsgHeader header = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional int32 from = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_from());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateUserReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.CreateUserReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateUserReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateUserReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.CreateUserReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.CreateUserReq)
    MergeFrom(*source);
  }
}

void CreateUserReq::MergeFrom(const CreateUserReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.CreateUserReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_user_name(from._internal_user_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_password(from._internal_password());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_header()->::ssp::MsgHeader::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000008u) {
      from_ = from.from_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CreateUserReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.CreateUserReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateUserReq::CopyFrom(const CreateUserReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.CreateUserReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateUserReq::IsInitialized() const {
  return true;
}

void CreateUserReq::InternalSwap(CreateUserReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  user_name_.Swap(&other->user_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateUserReq, from_)
      + sizeof(CreateUserReq::from_)
      - PROTOBUF_FIELD_OFFSET(CreateUserReq, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateUserReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CreateUserRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<CreateUserRsp>()._has_bits_);
  static const ::ssp::MsgHeader& header(const CreateUserRsp* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ssp::MsgHeader&
CreateUserRsp::_Internal::header(const CreateUserRsp* msg) {
  return *msg->header_;
}
CreateUserRsp::CreateUserRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ssp.CreateUserRsp)
}
CreateUserRsp::CreateUserRsp(const CreateUserRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&ret_, &from.ret_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&ret_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:ssp.CreateUserRsp)
}

void CreateUserRsp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&header_)) + sizeof(user_id_));
}

CreateUserRsp::~CreateUserRsp() {
  // @@protoc_insertion_point(destructor:ssp.CreateUserRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateUserRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void CreateUserRsp::ArenaDtor(void* object) {
  CreateUserRsp* _this = reinterpret_cast< CreateUserRsp* >(object);
  (void)_this;
}
void CreateUserRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateUserRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateUserRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.CreateUserRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&ret_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_id_) -
        reinterpret_cast<char*>(&ret_)) + sizeof(user_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateUserRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ssp.MsgHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_user_id(&has_bits);
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateUserRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssp.CreateUserRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional int32 ret = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ret(), target);
  }

  // optional int32 user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.CreateUserRsp)
  return target;
}

size_t CreateUserRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.CreateUserRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .ssp.MsgHeader header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional int32 ret = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ret());
    }

    // optional int32 user_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_user_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateUserRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.CreateUserRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateUserRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateUserRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.CreateUserRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.CreateUserRsp)
    MergeFrom(*source);
  }
}

void CreateUserRsp::MergeFrom(const CreateUserRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.CreateUserRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::ssp::MsgHeader::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      ret_ = from.ret_;
    }
    if (cached_has_bits & 0x00000004u) {
      user_id_ = from.user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CreateUserRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.CreateUserRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateUserRsp::CopyFrom(const CreateUserRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.CreateUserRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateUserRsp::IsInitialized() const {
  return true;
}

void CreateUserRsp::InternalSwap(CreateUserRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateUserRsp, user_id_)
      + sizeof(CreateUserRsp::user_id_)
      - PROTOBUF_FIELD_OFFSET(CreateUserRsp, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateUserRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LoginCheckReq::_Internal {
 public:
  using HasBits = decltype(std::declval<LoginCheckReq>()._has_bits_);
  static const ::ssp::MsgHeader& header(const LoginCheckReq* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_password(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ssp::MsgHeader&
LoginCheckReq::_Internal::header(const LoginCheckReq* msg) {
  return *msg->header_;
}
LoginCheckReq::LoginCheckReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ssp.LoginCheckReq)
}
LoginCheckReq::LoginCheckReq(const LoginCheckReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_name()) {
    user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_name(), 
      GetArena());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_password()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssp.LoginCheckReq)
}

void LoginCheckReq::SharedCtor() {
user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
header_ = nullptr;
}

LoginCheckReq::~LoginCheckReq() {
  // @@protoc_insertion_point(destructor:ssp.LoginCheckReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoginCheckReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void LoginCheckReq::ArenaDtor(void* object) {
  LoginCheckReq* _this = reinterpret_cast< LoginCheckReq* >(object);
  (void)_this;
}
void LoginCheckReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginCheckReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoginCheckReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.LoginCheckReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      user_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      password_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginCheckReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ssp.MsgHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssp.LoginCheckReq.user_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssp.LoginCheckReq.password");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginCheckReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssp.LoginCheckReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional string user_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssp.LoginCheckReq.user_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_name(), target);
  }

  // optional string password = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssp.LoginCheckReq.password");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.LoginCheckReq)
  return target;
}

size_t LoginCheckReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.LoginCheckReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string user_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_name());
    }

    // optional string password = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_password());
    }

    // optional .ssp.MsgHeader header = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginCheckReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.LoginCheckReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginCheckReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginCheckReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.LoginCheckReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.LoginCheckReq)
    MergeFrom(*source);
  }
}

void LoginCheckReq::MergeFrom(const LoginCheckReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.LoginCheckReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_user_name(from._internal_user_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_password(from._internal_password());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_header()->::ssp::MsgHeader::MergeFrom(from._internal_header());
    }
  }
}

void LoginCheckReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.LoginCheckReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginCheckReq::CopyFrom(const LoginCheckReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.LoginCheckReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginCheckReq::IsInitialized() const {
  return true;
}

void LoginCheckReq::InternalSwap(LoginCheckReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  user_name_.Swap(&other->user_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginCheckReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LoginCheckRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<LoginCheckRsp>()._has_bits_);
  static const ::ssp::MsgHeader& header(const LoginCheckRsp* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ssp::MsgHeader&
LoginCheckRsp::_Internal::header(const LoginCheckRsp* msg) {
  return *msg->header_;
}
LoginCheckRsp::LoginCheckRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ssp.LoginCheckRsp)
}
LoginCheckRsp::LoginCheckRsp(const LoginCheckRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&ret_, &from.ret_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&ret_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:ssp.LoginCheckRsp)
}

void LoginCheckRsp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&header_)) + sizeof(user_id_));
}

LoginCheckRsp::~LoginCheckRsp() {
  // @@protoc_insertion_point(destructor:ssp.LoginCheckRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoginCheckRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void LoginCheckRsp::ArenaDtor(void* object) {
  LoginCheckRsp* _this = reinterpret_cast< LoginCheckRsp* >(object);
  (void)_this;
}
void LoginCheckRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginCheckRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoginCheckRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.LoginCheckRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&ret_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_id_) -
        reinterpret_cast<char*>(&ret_)) + sizeof(user_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginCheckRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ssp.MsgHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_user_id(&has_bits);
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginCheckRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssp.LoginCheckRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional int32 ret = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ret(), target);
  }

  // optional int32 user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.LoginCheckRsp)
  return target;
}

size_t LoginCheckRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.LoginCheckRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .ssp.MsgHeader header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional int32 ret = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ret());
    }

    // optional int32 user_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_user_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginCheckRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.LoginCheckRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginCheckRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginCheckRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.LoginCheckRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.LoginCheckRsp)
    MergeFrom(*source);
  }
}

void LoginCheckRsp::MergeFrom(const LoginCheckRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.LoginCheckRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::ssp::MsgHeader::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      ret_ = from.ret_;
    }
    if (cached_has_bits & 0x00000004u) {
      user_id_ = from.user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LoginCheckRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.LoginCheckRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginCheckRsp::CopyFrom(const LoginCheckRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.LoginCheckRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginCheckRsp::IsInitialized() const {
  return true;
}

void LoginCheckRsp::InternalSwap(LoginCheckRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoginCheckRsp, user_id_)
      + sizeof(LoginCheckRsp::user_id_)
      - PROTOBUF_FIELD_OFFSET(LoginCheckRsp, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginCheckRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CheckUserExistReq::_Internal {
 public:
  using HasBits = decltype(std::declval<CheckUserExistReq>()._has_bits_);
  static const ::ssp::MsgHeader& header(const CheckUserExistReq* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ssp::MsgHeader&
CheckUserExistReq::_Internal::header(const CheckUserExistReq* msg) {
  return *msg->header_;
}
CheckUserExistReq::CheckUserExistReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ssp.CheckUserExistReq)
}
CheckUserExistReq::CheckUserExistReq(const CheckUserExistReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:ssp.CheckUserExistReq)
}

void CheckUserExistReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&header_)) + sizeof(user_id_));
}

CheckUserExistReq::~CheckUserExistReq() {
  // @@protoc_insertion_point(destructor:ssp.CheckUserExistReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CheckUserExistReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void CheckUserExistReq::ArenaDtor(void* object) {
  CheckUserExistReq* _this = reinterpret_cast< CheckUserExistReq* >(object);
  (void)_this;
}
void CheckUserExistReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckUserExistReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CheckUserExistReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.CheckUserExistReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  user_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckUserExistReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ssp.MsgHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_user_id(&has_bits);
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckUserExistReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssp.CheckUserExistReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional int32 user_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.CheckUserExistReq)
  return target;
}

size_t CheckUserExistReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.CheckUserExistReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ssp.MsgHeader header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional int32 user_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_user_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckUserExistReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.CheckUserExistReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckUserExistReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckUserExistReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.CheckUserExistReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.CheckUserExistReq)
    MergeFrom(*source);
  }
}

void CheckUserExistReq::MergeFrom(const CheckUserExistReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.CheckUserExistReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::ssp::MsgHeader::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      user_id_ = from.user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CheckUserExistReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.CheckUserExistReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckUserExistReq::CopyFrom(const CheckUserExistReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.CheckUserExistReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckUserExistReq::IsInitialized() const {
  return true;
}

void CheckUserExistReq::InternalSwap(CheckUserExistReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CheckUserExistReq, user_id_)
      + sizeof(CheckUserExistReq::user_id_)
      - PROTOBUF_FIELD_OFFSET(CheckUserExistReq, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckUserExistReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CheckUserExistRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<CheckUserExistRsp>()._has_bits_);
  static const ::ssp::MsgHeader& header(const CheckUserExistRsp* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ssp::MsgHeader&
CheckUserExistRsp::_Internal::header(const CheckUserExistRsp* msg) {
  return *msg->header_;
}
CheckUserExistRsp::CheckUserExistRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ssp.CheckUserExistRsp)
}
CheckUserExistRsp::CheckUserExistRsp(const CheckUserExistRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:ssp.CheckUserExistRsp)
}

void CheckUserExistRsp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&header_)) + sizeof(ret_));
}

CheckUserExistRsp::~CheckUserExistRsp() {
  // @@protoc_insertion_point(destructor:ssp.CheckUserExistRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CheckUserExistRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void CheckUserExistRsp::ArenaDtor(void* object) {
  CheckUserExistRsp* _this = reinterpret_cast< CheckUserExistRsp* >(object);
  (void)_this;
}
void CheckUserExistRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckUserExistRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CheckUserExistRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.CheckUserExistRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  ret_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckUserExistRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ssp.MsgHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckUserExistRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssp.CheckUserExistRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional int32 ret = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.CheckUserExistRsp)
  return target;
}

size_t CheckUserExistRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.CheckUserExistRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ssp.MsgHeader header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional int32 ret = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ret());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckUserExistRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.CheckUserExistRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckUserExistRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckUserExistRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.CheckUserExistRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.CheckUserExistRsp)
    MergeFrom(*source);
  }
}

void CheckUserExistRsp::MergeFrom(const CheckUserExistRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.CheckUserExistRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::ssp::MsgHeader::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CheckUserExistRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.CheckUserExistRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckUserExistRsp::CopyFrom(const CheckUserExistRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.CheckUserExistRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckUserExistRsp::IsInitialized() const {
  return true;
}

void CheckUserExistRsp::InternalSwap(CheckUserExistRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CheckUserExistRsp, ret_)
      + sizeof(CheckUserExistRsp::ret_)
      - PROTOBUF_FIELD_OFFSET(CheckUserExistRsp, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckUserExistRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ServerToUserReq::_Internal {
 public:
  using HasBits = decltype(std::declval<ServerToUserReq>()._has_bits_);
  static const ::ssp::MsgHeader& header(const ServerToUserReq* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ssp::GetUserIdByNameReq& get_user_id(const ServerToUserReq* msg);
  static void set_has_get_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ssp::CreateUserReq& create_user(const ServerToUserReq* msg);
  static void set_has_create_user(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ssp::LoginCheckReq& login_check(const ServerToUserReq* msg);
  static void set_has_login_check(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ssp::CheckUserExistReq& check_user_exist(const ServerToUserReq* msg);
  static void set_has_check_user_exist(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::ssp::MsgHeader&
ServerToUserReq::_Internal::header(const ServerToUserReq* msg) {
  return *msg->header_;
}
const ::ssp::GetUserIdByNameReq&
ServerToUserReq::_Internal::get_user_id(const ServerToUserReq* msg) {
  return *msg->get_user_id_;
}
const ::ssp::CreateUserReq&
ServerToUserReq::_Internal::create_user(const ServerToUserReq* msg) {
  return *msg->create_user_;
}
const ::ssp::LoginCheckReq&
ServerToUserReq::_Internal::login_check(const ServerToUserReq* msg) {
  return *msg->login_check_;
}
const ::ssp::CheckUserExistReq&
ServerToUserReq::_Internal::check_user_exist(const ServerToUserReq* msg) {
  return *msg->check_user_exist_;
}
ServerToUserReq::ServerToUserReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ssp.ServerToUserReq)
}
ServerToUserReq::ServerToUserReq(const ServerToUserReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_get_user_id()) {
    get_user_id_ = new ::ssp::GetUserIdByNameReq(*from.get_user_id_);
  } else {
    get_user_id_ = nullptr;
  }
  if (from._internal_has_create_user()) {
    create_user_ = new ::ssp::CreateUserReq(*from.create_user_);
  } else {
    create_user_ = nullptr;
  }
  if (from._internal_has_login_check()) {
    login_check_ = new ::ssp::LoginCheckReq(*from.login_check_);
  } else {
    login_check_ = nullptr;
  }
  if (from._internal_has_check_user_exist()) {
    check_user_exist_ = new ::ssp::CheckUserExistReq(*from.check_user_exist_);
  } else {
    check_user_exist_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssp.ServerToUserReq)
}

void ServerToUserReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&check_user_exist_) -
    reinterpret_cast<char*>(&header_)) + sizeof(check_user_exist_));
}

ServerToUserReq::~ServerToUserReq() {
  // @@protoc_insertion_point(destructor:ssp.ServerToUserReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerToUserReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete get_user_id_;
  if (this != internal_default_instance()) delete create_user_;
  if (this != internal_default_instance()) delete login_check_;
  if (this != internal_default_instance()) delete check_user_exist_;
}

void ServerToUserReq::ArenaDtor(void* object) {
  ServerToUserReq* _this = reinterpret_cast< ServerToUserReq* >(object);
  (void)_this;
}
void ServerToUserReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerToUserReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerToUserReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.ServerToUserReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(get_user_id_ != nullptr);
      get_user_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(create_user_ != nullptr);
      create_user_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(login_check_ != nullptr);
      login_check_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(check_user_exist_ != nullptr);
      check_user_exist_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerToUserReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ssp.MsgHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssp.GetUserIdByNameReq get_user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_user_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssp.CreateUserReq create_user = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssp.LoginCheckReq login_check = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_login_check(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssp.CheckUserExistReq check_user_exist = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_check_user_exist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerToUserReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssp.ServerToUserReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional .ssp.GetUserIdByNameReq get_user_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::get_user_id(this), target, stream);
  }

  // optional .ssp.CreateUserReq create_user = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::create_user(this), target, stream);
  }

  // optional .ssp.LoginCheckReq login_check = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::login_check(this), target, stream);
  }

  // optional .ssp.CheckUserExistReq check_user_exist = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::check_user_exist(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.ServerToUserReq)
  return target;
}

size_t ServerToUserReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.ServerToUserReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .ssp.MsgHeader header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .ssp.GetUserIdByNameReq get_user_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *get_user_id_);
    }

    // optional .ssp.CreateUserReq create_user = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *create_user_);
    }

    // optional .ssp.LoginCheckReq login_check = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *login_check_);
    }

    // optional .ssp.CheckUserExistReq check_user_exist = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *check_user_exist_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerToUserReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.ServerToUserReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerToUserReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerToUserReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.ServerToUserReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.ServerToUserReq)
    MergeFrom(*source);
  }
}

void ServerToUserReq::MergeFrom(const ServerToUserReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.ServerToUserReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::ssp::MsgHeader::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_get_user_id()->::ssp::GetUserIdByNameReq::MergeFrom(from._internal_get_user_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_create_user()->::ssp::CreateUserReq::MergeFrom(from._internal_create_user());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_login_check()->::ssp::LoginCheckReq::MergeFrom(from._internal_login_check());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_check_user_exist()->::ssp::CheckUserExistReq::MergeFrom(from._internal_check_user_exist());
    }
  }
}

void ServerToUserReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.ServerToUserReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerToUserReq::CopyFrom(const ServerToUserReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.ServerToUserReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerToUserReq::IsInitialized() const {
  return true;
}

void ServerToUserReq::InternalSwap(ServerToUserReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerToUserReq, check_user_exist_)
      + sizeof(ServerToUserReq::check_user_exist_)
      - PROTOBUF_FIELD_OFFSET(ServerToUserReq, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerToUserReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UserToServerRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<UserToServerRsp>()._has_bits_);
  static const ::ssp::MsgHeader& header(const UserToServerRsp* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ssp::GetUserIdByNameRsp& get_user_id(const UserToServerRsp* msg);
  static void set_has_get_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ssp::CreateUserRsp& create_user(const UserToServerRsp* msg);
  static void set_has_create_user(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ssp::LoginCheckRsp& login_check(const UserToServerRsp* msg);
  static void set_has_login_check(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ssp::CheckUserExistRsp& check_user_exist(const UserToServerRsp* msg);
  static void set_has_check_user_exist(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::ssp::MsgHeader&
UserToServerRsp::_Internal::header(const UserToServerRsp* msg) {
  return *msg->header_;
}
const ::ssp::GetUserIdByNameRsp&
UserToServerRsp::_Internal::get_user_id(const UserToServerRsp* msg) {
  return *msg->get_user_id_;
}
const ::ssp::CreateUserRsp&
UserToServerRsp::_Internal::create_user(const UserToServerRsp* msg) {
  return *msg->create_user_;
}
const ::ssp::LoginCheckRsp&
UserToServerRsp::_Internal::login_check(const UserToServerRsp* msg) {
  return *msg->login_check_;
}
const ::ssp::CheckUserExistRsp&
UserToServerRsp::_Internal::check_user_exist(const UserToServerRsp* msg) {
  return *msg->check_user_exist_;
}
UserToServerRsp::UserToServerRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ssp.UserToServerRsp)
}
UserToServerRsp::UserToServerRsp(const UserToServerRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::ssp::MsgHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_get_user_id()) {
    get_user_id_ = new ::ssp::GetUserIdByNameRsp(*from.get_user_id_);
  } else {
    get_user_id_ = nullptr;
  }
  if (from._internal_has_create_user()) {
    create_user_ = new ::ssp::CreateUserRsp(*from.create_user_);
  } else {
    create_user_ = nullptr;
  }
  if (from._internal_has_login_check()) {
    login_check_ = new ::ssp::LoginCheckRsp(*from.login_check_);
  } else {
    login_check_ = nullptr;
  }
  if (from._internal_has_check_user_exist()) {
    check_user_exist_ = new ::ssp::CheckUserExistRsp(*from.check_user_exist_);
  } else {
    check_user_exist_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssp.UserToServerRsp)
}

void UserToServerRsp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&check_user_exist_) -
    reinterpret_cast<char*>(&header_)) + sizeof(check_user_exist_));
}

UserToServerRsp::~UserToServerRsp() {
  // @@protoc_insertion_point(destructor:ssp.UserToServerRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserToServerRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete get_user_id_;
  if (this != internal_default_instance()) delete create_user_;
  if (this != internal_default_instance()) delete login_check_;
  if (this != internal_default_instance()) delete check_user_exist_;
}

void UserToServerRsp::ArenaDtor(void* object) {
  UserToServerRsp* _this = reinterpret_cast< UserToServerRsp* >(object);
  (void)_this;
}
void UserToServerRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserToServerRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserToServerRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.UserToServerRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(get_user_id_ != nullptr);
      get_user_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(create_user_ != nullptr);
      create_user_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(login_check_ != nullptr);
      login_check_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(check_user_exist_ != nullptr);
      check_user_exist_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserToServerRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ssp.MsgHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssp.GetUserIdByNameRsp get_user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_user_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssp.CreateUserRsp create_user = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssp.LoginCheckRsp login_check = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_login_check(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssp.CheckUserExistRsp check_user_exist = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_check_user_exist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserToServerRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssp.UserToServerRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssp.MsgHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional .ssp.GetUserIdByNameRsp get_user_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::get_user_id(this), target, stream);
  }

  // optional .ssp.CreateUserRsp create_user = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::create_user(this), target, stream);
  }

  // optional .ssp.LoginCheckRsp login_check = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::login_check(this), target, stream);
  }

  // optional .ssp.CheckUserExistRsp check_user_exist = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::check_user_exist(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.UserToServerRsp)
  return target;
}

size_t UserToServerRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.UserToServerRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .ssp.MsgHeader header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .ssp.GetUserIdByNameRsp get_user_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *get_user_id_);
    }

    // optional .ssp.CreateUserRsp create_user = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *create_user_);
    }

    // optional .ssp.LoginCheckRsp login_check = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *login_check_);
    }

    // optional .ssp.CheckUserExistRsp check_user_exist = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *check_user_exist_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserToServerRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.UserToServerRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const UserToServerRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserToServerRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.UserToServerRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.UserToServerRsp)
    MergeFrom(*source);
  }
}

void UserToServerRsp::MergeFrom(const UserToServerRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.UserToServerRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::ssp::MsgHeader::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_get_user_id()->::ssp::GetUserIdByNameRsp::MergeFrom(from._internal_get_user_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_create_user()->::ssp::CreateUserRsp::MergeFrom(from._internal_create_user());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_login_check()->::ssp::LoginCheckRsp::MergeFrom(from._internal_login_check());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_check_user_exist()->::ssp::CheckUserExistRsp::MergeFrom(from._internal_check_user_exist());
    }
  }
}

void UserToServerRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.UserToServerRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserToServerRsp::CopyFrom(const UserToServerRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.UserToServerRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserToServerRsp::IsInitialized() const {
  return true;
}

void UserToServerRsp::InternalSwap(UserToServerRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserToServerRsp, check_user_exist_)
      + sizeof(UserToServerRsp::check_user_exist_)
      - PROTOBUF_FIELD_OFFSET(UserToServerRsp, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserToServerRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ssp
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ssp::MsgHeader* Arena::CreateMaybeMessage< ::ssp::MsgHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssp::MsgHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::ssp::RegReq* Arena::CreateMaybeMessage< ::ssp::RegReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssp::RegReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ssp::RegRsp* Arena::CreateMaybeMessage< ::ssp::RegRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssp::RegRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::ssp::LoginReq* Arena::CreateMaybeMessage< ::ssp::LoginReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssp::LoginReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ssp::LoginRsp* Arena::CreateMaybeMessage< ::ssp::LoginRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssp::LoginRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::ssp::LogoutReq* Arena::CreateMaybeMessage< ::ssp::LogoutReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssp::LogoutReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ssp::LogoutRsp* Arena::CreateMaybeMessage< ::ssp::LogoutRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssp::LogoutRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::ssp::AddFriendReq* Arena::CreateMaybeMessage< ::ssp::AddFriendReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssp::AddFriendReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ssp::AddFriendRsp* Arena::CreateMaybeMessage< ::ssp::AddFriendRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssp::AddFriendRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::ssp::DelFriendReq* Arena::CreateMaybeMessage< ::ssp::DelFriendReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssp::DelFriendReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ssp::DelFriendRsp* Arena::CreateMaybeMessage< ::ssp::DelFriendRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssp::DelFriendRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::ssp::PublishMessageReq* Arena::CreateMaybeMessage< ::ssp::PublishMessageReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssp::PublishMessageReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ssp::PublishMessageRsp* Arena::CreateMaybeMessage< ::ssp::PublishMessageRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssp::PublishMessageRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::ssp::GetMessageListReq* Arena::CreateMaybeMessage< ::ssp::GetMessageListReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssp::GetMessageListReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ssp::MessageItem* Arena::CreateMaybeMessage< ::ssp::MessageItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssp::MessageItem >(arena);
}
template<> PROTOBUF_NOINLINE ::ssp::GetMessageListRsp* Arena::CreateMaybeMessage< ::ssp::GetMessageListRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssp::GetMessageListRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::ssp::GetPhotoReq* Arena::CreateMaybeMessage< ::ssp::GetPhotoReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssp::GetPhotoReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ssp::GetPhotoRsp* Arena::CreateMaybeMessage< ::ssp::GetPhotoRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssp::GetPhotoRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::ssp::CommonReq* Arena::CreateMaybeMessage< ::ssp::CommonReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssp::CommonReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ssp::CommonRsp* Arena::CreateMaybeMessage< ::ssp::CommonRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssp::CommonRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::ssp::GetUserIdByNameReq* Arena::CreateMaybeMessage< ::ssp::GetUserIdByNameReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssp::GetUserIdByNameReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ssp::GetUserIdByNameRsp* Arena::CreateMaybeMessage< ::ssp::GetUserIdByNameRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssp::GetUserIdByNameRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::ssp::CreateUserReq* Arena::CreateMaybeMessage< ::ssp::CreateUserReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssp::CreateUserReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ssp::CreateUserRsp* Arena::CreateMaybeMessage< ::ssp::CreateUserRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssp::CreateUserRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::ssp::LoginCheckReq* Arena::CreateMaybeMessage< ::ssp::LoginCheckReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssp::LoginCheckReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ssp::LoginCheckRsp* Arena::CreateMaybeMessage< ::ssp::LoginCheckRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssp::LoginCheckRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::ssp::CheckUserExistReq* Arena::CreateMaybeMessage< ::ssp::CheckUserExistReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssp::CheckUserExistReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ssp::CheckUserExistRsp* Arena::CreateMaybeMessage< ::ssp::CheckUserExistRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssp::CheckUserExistRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::ssp::ServerToUserReq* Arena::CreateMaybeMessage< ::ssp::ServerToUserReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssp::ServerToUserReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ssp::UserToServerRsp* Arena::CreateMaybeMessage< ::ssp::UserToServerRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssp::UserToServerRsp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

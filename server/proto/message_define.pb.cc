// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_define.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message_define.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ssp {

namespace {

const ::google::protobuf::Descriptor* MsgHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogoutReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogoutReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogoutRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogoutRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddFriendReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddFriendReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddFriendRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddFriendRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DelFriendReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelFriendReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DelFriendRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelFriendRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PublishMessageReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PublishMessageReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PublishMessageRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PublishMessageRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMessageListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetMessageListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMessageListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetMessageListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPhotoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPhotoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPhotoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPhotoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommonReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommonReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommonRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommonRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUserIdByNameReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUserIdByNameReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUserIdByNameRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUserIdByNameRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateUserReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateUserReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateUserRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateUserRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginCheckReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginCheckReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginCheckRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginCheckRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckUserExistReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckUserExistReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckUserExistRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckUserExistRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerToUserReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerToUserReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserToServerRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserToServerRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_5fdefine_2eproto() {
  protobuf_AddDesc_message_5fdefine_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message_define.proto");
  GOOGLE_CHECK(file != NULL);
  MsgHeader_descriptor_ = file->message_type(0);
  static const int MsgHeader_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHeader, ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHeader, cmd_type_),
  };
  MsgHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgHeader_descriptor_,
      MsgHeader::default_instance_,
      MsgHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgHeader));
  RegReq_descriptor_ = file->message_type(1);
  static const int RegReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegReq, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegReq, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegReq, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegReq, from_),
  };
  RegReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegReq_descriptor_,
      RegReq::default_instance_,
      RegReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegReq));
  RegRsp_descriptor_ = file->message_type(2);
  static const int RegRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegRsp, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegRsp, user_id_),
  };
  RegRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegRsp_descriptor_,
      RegRsp::default_instance_,
      RegRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegRsp));
  LoginReq_descriptor_ = file->message_type(3);
  static const int LoginReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, cmd_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, password_),
  };
  LoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginReq_descriptor_,
      LoginReq::default_instance_,
      LoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginReq));
  LoginRsp_descriptor_ = file->message_type(4);
  static const int LoginRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsp, ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsp, cmd_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsp, user_id_),
  };
  LoginRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRsp_descriptor_,
      LoginRsp::default_instance_,
      LoginRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRsp));
  LogoutReq_descriptor_ = file->message_type(5);
  static const int LogoutReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutReq, user_id_),
  };
  LogoutReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogoutReq_descriptor_,
      LogoutReq::default_instance_,
      LogoutReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogoutReq));
  LogoutRsp_descriptor_ = file->message_type(6);
  static const int LogoutRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutRsp, ret_),
  };
  LogoutRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogoutRsp_descriptor_,
      LogoutRsp::default_instance_,
      LogoutRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogoutRsp));
  AddFriendReq_descriptor_ = file->message_type(7);
  static const int AddFriendReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendReq, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendReq, other_id_),
  };
  AddFriendReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddFriendReq_descriptor_,
      AddFriendReq::default_instance_,
      AddFriendReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddFriendReq));
  AddFriendRsp_descriptor_ = file->message_type(8);
  static const int AddFriendRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendRsp, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendRsp, ret_),
  };
  AddFriendRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddFriendRsp_descriptor_,
      AddFriendRsp::default_instance_,
      AddFriendRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddFriendRsp));
  DelFriendReq_descriptor_ = file->message_type(9);
  static const int DelFriendReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelFriendReq, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelFriendReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelFriendReq, other_id_),
  };
  DelFriendReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DelFriendReq_descriptor_,
      DelFriendReq::default_instance_,
      DelFriendReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelFriendReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelFriendReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DelFriendReq));
  DelFriendRsp_descriptor_ = file->message_type(10);
  static const int DelFriendRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelFriendRsp, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelFriendRsp, ret_),
  };
  DelFriendRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DelFriendRsp_descriptor_,
      DelFriendRsp::default_instance_,
      DelFriendRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelFriendRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelFriendRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DelFriendRsp));
  PublishMessageReq_descriptor_ = file->message_type(11);
  static const int PublishMessageReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishMessageReq, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishMessageReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishMessageReq, content_),
  };
  PublishMessageReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PublishMessageReq_descriptor_,
      PublishMessageReq::default_instance_,
      PublishMessageReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishMessageReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishMessageReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PublishMessageReq));
  PublishMessageRsp_descriptor_ = file->message_type(12);
  static const int PublishMessageRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishMessageRsp, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishMessageRsp, ret_),
  };
  PublishMessageRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PublishMessageRsp_descriptor_,
      PublishMessageRsp::default_instance_,
      PublishMessageRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishMessageRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishMessageRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PublishMessageRsp));
  GetMessageListReq_descriptor_ = file->message_type(13);
  static const int GetMessageListReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMessageListReq, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMessageListReq, user_id_),
  };
  GetMessageListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetMessageListReq_descriptor_,
      GetMessageListReq::default_instance_,
      GetMessageListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMessageListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMessageListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetMessageListReq));
  MessageItem_descriptor_ = file->message_type(14);
  static const int MessageItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageItem, publisher_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageItem, publish_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageItem, content_),
  };
  MessageItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageItem_descriptor_,
      MessageItem::default_instance_,
      MessageItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageItem));
  GetMessageListRsp_descriptor_ = file->message_type(15);
  static const int GetMessageListRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMessageListRsp, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMessageListRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMessageListRsp, message_list_),
  };
  GetMessageListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetMessageListRsp_descriptor_,
      GetMessageListRsp::default_instance_,
      GetMessageListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMessageListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMessageListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetMessageListRsp));
  GetPhotoReq_descriptor_ = file->message_type(16);
  static const int GetPhotoReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPhotoReq, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPhotoReq, user_id_),
  };
  GetPhotoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPhotoReq_descriptor_,
      GetPhotoReq::default_instance_,
      GetPhotoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPhotoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPhotoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPhotoReq));
  GetPhotoRsp_descriptor_ = file->message_type(17);
  static const int GetPhotoRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPhotoRsp, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPhotoRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPhotoRsp, last_publisher_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPhotoRsp, last_publisher_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPhotoRsp, last_user_get_time_),
  };
  GetPhotoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPhotoRsp_descriptor_,
      GetPhotoRsp::default_instance_,
      GetPhotoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPhotoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPhotoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPhotoRsp));
  CommonReq_descriptor_ = file->message_type(18);
  static const int CommonReq_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonReq, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonReq, reg_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonReq, login_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonReq, logout_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonReq, add_friend_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonReq, del_friend_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonReq, publish_message_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonReq, get_message_list_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonReq, get_photo_req_),
  };
  CommonReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommonReq_descriptor_,
      CommonReq::default_instance_,
      CommonReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommonReq));
  CommonRsp_descriptor_ = file->message_type(19);
  static const int CommonRsp_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonRsp, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonRsp, reg_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonRsp, login_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonRsp, logout_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonRsp, add_friend_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonRsp, del_friend_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonRsp, publish_message_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonRsp, get_message_list_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonRsp, get_photo_rsp_),
  };
  CommonRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommonRsp_descriptor_,
      CommonRsp::default_instance_,
      CommonRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommonRsp));
  GetUserIdByNameReq_descriptor_ = file->message_type(20);
  static const int GetUserIdByNameReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserIdByNameReq, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserIdByNameReq, user_name_),
  };
  GetUserIdByNameReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUserIdByNameReq_descriptor_,
      GetUserIdByNameReq::default_instance_,
      GetUserIdByNameReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserIdByNameReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserIdByNameReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUserIdByNameReq));
  GetUserIdByNameRsp_descriptor_ = file->message_type(21);
  static const int GetUserIdByNameRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserIdByNameRsp, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserIdByNameRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserIdByNameRsp, user_id_),
  };
  GetUserIdByNameRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUserIdByNameRsp_descriptor_,
      GetUserIdByNameRsp::default_instance_,
      GetUserIdByNameRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserIdByNameRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserIdByNameRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUserIdByNameRsp));
  CreateUserReq_descriptor_ = file->message_type(22);
  static const int CreateUserReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateUserReq, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateUserReq, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateUserReq, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateUserReq, from_),
  };
  CreateUserReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateUserReq_descriptor_,
      CreateUserReq::default_instance_,
      CreateUserReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateUserReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateUserReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateUserReq));
  CreateUserRsp_descriptor_ = file->message_type(23);
  static const int CreateUserRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateUserRsp, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateUserRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateUserRsp, user_id_),
  };
  CreateUserRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateUserRsp_descriptor_,
      CreateUserRsp::default_instance_,
      CreateUserRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateUserRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateUserRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateUserRsp));
  LoginCheckReq_descriptor_ = file->message_type(24);
  static const int LoginCheckReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginCheckReq, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginCheckReq, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginCheckReq, password_),
  };
  LoginCheckReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginCheckReq_descriptor_,
      LoginCheckReq::default_instance_,
      LoginCheckReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginCheckReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginCheckReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginCheckReq));
  LoginCheckRsp_descriptor_ = file->message_type(25);
  static const int LoginCheckRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginCheckRsp, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginCheckRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginCheckRsp, user_id_),
  };
  LoginCheckRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginCheckRsp_descriptor_,
      LoginCheckRsp::default_instance_,
      LoginCheckRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginCheckRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginCheckRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginCheckRsp));
  CheckUserExistReq_descriptor_ = file->message_type(26);
  static const int CheckUserExistReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckUserExistReq, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckUserExistReq, user_id_),
  };
  CheckUserExistReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckUserExistReq_descriptor_,
      CheckUserExistReq::default_instance_,
      CheckUserExistReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckUserExistReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckUserExistReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckUserExistReq));
  CheckUserExistRsp_descriptor_ = file->message_type(27);
  static const int CheckUserExistRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckUserExistRsp, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckUserExistRsp, ret_),
  };
  CheckUserExistRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckUserExistRsp_descriptor_,
      CheckUserExistRsp::default_instance_,
      CheckUserExistRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckUserExistRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckUserExistRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckUserExistRsp));
  ServerToUserReq_descriptor_ = file->message_type(28);
  static const int ServerToUserReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToUserReq, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToUserReq, get_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToUserReq, create_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToUserReq, login_check_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToUserReq, check_user_exist_),
  };
  ServerToUserReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerToUserReq_descriptor_,
      ServerToUserReq::default_instance_,
      ServerToUserReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToUserReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToUserReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerToUserReq));
  UserToServerRsp_descriptor_ = file->message_type(29);
  static const int UserToServerRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserToServerRsp, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserToServerRsp, get_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserToServerRsp, create_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserToServerRsp, login_check_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserToServerRsp, check_user_exist_),
  };
  UserToServerRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserToServerRsp_descriptor_,
      UserToServerRsp::default_instance_,
      UserToServerRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserToServerRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserToServerRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserToServerRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_5fdefine_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgHeader_descriptor_, &MsgHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegReq_descriptor_, &RegReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegRsp_descriptor_, &RegRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginReq_descriptor_, &LoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRsp_descriptor_, &LoginRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogoutReq_descriptor_, &LogoutReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogoutRsp_descriptor_, &LogoutRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddFriendReq_descriptor_, &AddFriendReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddFriendRsp_descriptor_, &AddFriendRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DelFriendReq_descriptor_, &DelFriendReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DelFriendRsp_descriptor_, &DelFriendRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PublishMessageReq_descriptor_, &PublishMessageReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PublishMessageRsp_descriptor_, &PublishMessageRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetMessageListReq_descriptor_, &GetMessageListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageItem_descriptor_, &MessageItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetMessageListRsp_descriptor_, &GetMessageListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPhotoReq_descriptor_, &GetPhotoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPhotoRsp_descriptor_, &GetPhotoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommonReq_descriptor_, &CommonReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommonRsp_descriptor_, &CommonRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUserIdByNameReq_descriptor_, &GetUserIdByNameReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUserIdByNameRsp_descriptor_, &GetUserIdByNameRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateUserReq_descriptor_, &CreateUserReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateUserRsp_descriptor_, &CreateUserRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginCheckReq_descriptor_, &LoginCheckReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginCheckRsp_descriptor_, &LoginCheckRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckUserExistReq_descriptor_, &CheckUserExistReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckUserExistRsp_descriptor_, &CheckUserExistRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerToUserReq_descriptor_, &ServerToUserReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserToServerRsp_descriptor_, &UserToServerRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_5fdefine_2eproto() {
  delete MsgHeader::default_instance_;
  delete MsgHeader_reflection_;
  delete RegReq::default_instance_;
  delete RegReq_reflection_;
  delete RegRsp::default_instance_;
  delete RegRsp_reflection_;
  delete LoginReq::default_instance_;
  delete LoginReq_reflection_;
  delete LoginRsp::default_instance_;
  delete LoginRsp_reflection_;
  delete LogoutReq::default_instance_;
  delete LogoutReq_reflection_;
  delete LogoutRsp::default_instance_;
  delete LogoutRsp_reflection_;
  delete AddFriendReq::default_instance_;
  delete AddFriendReq_reflection_;
  delete AddFriendRsp::default_instance_;
  delete AddFriendRsp_reflection_;
  delete DelFriendReq::default_instance_;
  delete DelFriendReq_reflection_;
  delete DelFriendRsp::default_instance_;
  delete DelFriendRsp_reflection_;
  delete PublishMessageReq::default_instance_;
  delete PublishMessageReq_reflection_;
  delete PublishMessageRsp::default_instance_;
  delete PublishMessageRsp_reflection_;
  delete GetMessageListReq::default_instance_;
  delete GetMessageListReq_reflection_;
  delete MessageItem::default_instance_;
  delete MessageItem_reflection_;
  delete GetMessageListRsp::default_instance_;
  delete GetMessageListRsp_reflection_;
  delete GetPhotoReq::default_instance_;
  delete GetPhotoReq_reflection_;
  delete GetPhotoRsp::default_instance_;
  delete GetPhotoRsp_reflection_;
  delete CommonReq::default_instance_;
  delete CommonReq_reflection_;
  delete CommonRsp::default_instance_;
  delete CommonRsp_reflection_;
  delete GetUserIdByNameReq::default_instance_;
  delete GetUserIdByNameReq_reflection_;
  delete GetUserIdByNameRsp::default_instance_;
  delete GetUserIdByNameRsp_reflection_;
  delete CreateUserReq::default_instance_;
  delete CreateUserReq_reflection_;
  delete CreateUserRsp::default_instance_;
  delete CreateUserRsp_reflection_;
  delete LoginCheckReq::default_instance_;
  delete LoginCheckReq_reflection_;
  delete LoginCheckRsp::default_instance_;
  delete LoginCheckRsp_reflection_;
  delete CheckUserExistReq::default_instance_;
  delete CheckUserExistReq_reflection_;
  delete CheckUserExistRsp::default_instance_;
  delete CheckUserExistRsp_reflection_;
  delete ServerToUserReq::default_instance_;
  delete ServerToUserReq_reflection_;
  delete UserToServerRsp::default_instance_;
  delete UserToServerRsp_reflection_;
}

void protobuf_AddDesc_message_5fdefine_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024message_define.proto\022\003ssp\"*\n\tMsgHeader"
    "\022\013\n\003ver\030\001 \001(\r\022\020\n\010cmd_type\030\002 \001(\r\"[\n\006RegRe"
    "q\022\036\n\006header\030\001 \001(\0132\016.ssp.MsgHeader\022\021\n\tuse"
    "r_name\030\003 \001(\t\022\020\n\010password\030\004 \001(\t\022\014\n\004from\030\005"
    " \001(\r\"F\n\006RegRsp\022\036\n\006header\030\001 \001(\0132\016.ssp.Msg"
    "Header\022\013\n\003ret\030\003 \001(\r\022\017\n\007user_id\030\004 \001(\r\"N\n\010"
    "LoginReq\022\013\n\003ver\030\001 \001(\r\022\020\n\010cmd_type\030\002 \001(\r\022"
    "\021\n\tuser_name\030\003 \001(\t\022\020\n\010password\030\004 \001(\t\"G\n\010"
    "LoginRsp\022\013\n\003ver\030\001 \001(\r\022\020\n\010cmd_type\030\002 \001(\r\022"
    "\013\n\003ret\030\003 \001(\r\022\017\n\007user_id\030\004 \001(\r\"\034\n\tLogoutR"
    "eq\022\017\n\007user_id\030\003 \001(\r\"\030\n\tLogoutRsp\022\013\n\003ret\030"
    "\002 \001(\r\"Q\n\014AddFriendReq\022\036\n\006header\030\001 \001(\0132\016."
    "ssp.MsgHeader\022\017\n\007user_id\030\002 \001(\r\022\020\n\010other_"
    "id\030\003 \001(\r\";\n\014AddFriendRsp\022\036\n\006header\030\001 \001(\013"
    "2\016.ssp.MsgHeader\022\013\n\003ret\030\002 \001(\r\"Q\n\014DelFrie"
    "ndReq\022\036\n\006header\030\001 \001(\0132\016.ssp.MsgHeader\022\017\n"
    "\007user_id\030\002 \001(\r\022\020\n\010other_id\030\003 \001(\r\";\n\014DelF"
    "riendRsp\022\036\n\006header\030\001 \001(\0132\016.ssp.MsgHeader"
    "\022\013\n\003ret\030\002 \001(\r\"U\n\021PublishMessageReq\022\036\n\006he"
    "ader\030\001 \001(\0132\016.ssp.MsgHeader\022\017\n\007user_id\030\002 "
    "\001(\r\022\017\n\007content\030\003 \001(\t\"@\n\021PublishMessageRs"
    "p\022\036\n\006header\030\001 \001(\0132\016.ssp.MsgHeader\022\013\n\003ret"
    "\030\002 \001(\r\"D\n\021GetMessageListReq\022\036\n\006header\030\001 "
    "\001(\0132\016.ssp.MsgHeader\022\017\n\007user_id\030\002 \001(\r\"J\n\013"
    "MessageItem\022\024\n\014publisher_id\030\001 \001(\r\022\024\n\014pub"
    "lish_time\030\002 \001(\r\022\017\n\007content\030\003 \001(\t\"h\n\021GetM"
    "essageListRsp\022\036\n\006header\030\001 \001(\0132\016.ssp.MsgH"
    "eader\022\013\n\003ret\030\002 \001(\r\022&\n\014message_list\030\003 \003(\013"
    "2\020.ssp.MessageItem\">\n\013GetPhotoReq\022\036\n\006hea"
    "der\030\001 \001(\0132\016.ssp.MsgHeader\022\017\n\007user_id\030\002 \001"
    "(\r\"\216\001\n\013GetPhotoRsp\022\036\n\006header\030\001 \001(\0132\016.ssp"
    ".MsgHeader\022\013\n\003ret\030\002 \001(\r\022\031\n\021last_publishe"
    "r_id\030\003 \001(\r\022\033\n\023last_publisher_time\030\004 \001(\r\022"
    "\032\n\022last_user_get_time\030\005 \001(\r\"\371\002\n\tCommonRe"
    "q\022\036\n\006header\030\001 \001(\0132\016.ssp.MsgHeader\022\034\n\007reg"
    "_req\030\002 \001(\0132\013.ssp.RegReq\022 \n\tlogin_req\030\003 \001"
    "(\0132\r.ssp.LoginReq\022\"\n\nlogout_req\030\004 \001(\0132\016."
    "ssp.LogoutReq\022)\n\016add_friend_req\030\005 \001(\0132\021."
    "ssp.AddFriendReq\022)\n\016del_friend_req\030\006 \001(\013"
    "2\021.ssp.DelFriendReq\0223\n\023publish_message_r"
    "eq\030\007 \001(\0132\026.ssp.PublishMessageReq\0224\n\024get_"
    "message_list_req\030\010 \001(\0132\026.ssp.GetMessageL"
    "istReq\022\'\n\rget_photo_req\030\t \001(\0132\020.ssp.GetP"
    "hotoReq\"\371\002\n\tCommonRsp\022\036\n\006header\030\001 \001(\0132\016."
    "ssp.MsgHeader\022\034\n\007reg_rsp\030\002 \001(\0132\013.ssp.Reg"
    "Rsp\022 \n\tlogin_rsp\030\003 \001(\0132\r.ssp.LoginRsp\022\"\n"
    "\nlogout_rsp\030\004 \001(\0132\016.ssp.LogoutRsp\022)\n\016add"
    "_friend_rsp\030\005 \001(\0132\021.ssp.AddFriendRsp\022)\n\016"
    "del_friend_rsp\030\006 \001(\0132\021.ssp.DelFriendRsp\022"
    "3\n\023publish_message_rsp\030\007 \001(\0132\026.ssp.Publi"
    "shMessageRsp\0224\n\024get_message_list_rsp\030\010 \001"
    "(\0132\026.ssp.GetMessageListRsp\022\'\n\rget_photo_"
    "rsp\030\t \001(\0132\020.ssp.GetPhotoRsp\"G\n\022GetUserId"
    "ByNameReq\022\036\n\006header\030\001 \001(\0132\016.ssp.MsgHeade"
    "r\022\021\n\tuser_name\030\002 \001(\t\"R\n\022GetUserIdByNameR"
    "sp\022\036\n\006header\030\001 \001(\0132\016.ssp.MsgHeader\022\013\n\003re"
    "t\030\002 \001(\005\022\017\n\007user_id\030\003 \001(\005\"b\n\rCreateUserRe"
    "q\022\036\n\006header\030\001 \001(\0132\016.ssp.MsgHeader\022\021\n\tuse"
    "r_name\030\002 \001(\t\022\020\n\010password\030\003 \001(\t\022\014\n\004from\030\004"
    " \001(\005\"M\n\rCreateUserRsp\022\036\n\006header\030\001 \001(\0132\016."
    "ssp.MsgHeader\022\013\n\003ret\030\002 \001(\005\022\017\n\007user_id\030\003 "
    "\001(\005\"T\n\rLoginCheckReq\022\036\n\006header\030\001 \001(\0132\016.s"
    "sp.MsgHeader\022\021\n\tuser_name\030\002 \001(\t\022\020\n\010passw"
    "ord\030\003 \001(\t\"M\n\rLoginCheckRsp\022\036\n\006header\030\001 \001"
    "(\0132\016.ssp.MsgHeader\022\013\n\003ret\030\002 \001(\005\022\017\n\007user_"
    "id\030\003 \001(\005\"D\n\021CheckUserExistReq\022\036\n\006header\030"
    "\001 \001(\0132\016.ssp.MsgHeader\022\017\n\007user_id\030\002 \001(\005\"@"
    "\n\021CheckUserExistRsp\022\036\n\006header\030\001 \001(\0132\016.ss"
    "p.MsgHeader\022\013\n\003ret\030\002 \001(\005\"\343\001\n\017ServerToUse"
    "rReq\022\036\n\006header\030\001 \001(\0132\016.ssp.MsgHeader\022,\n\013"
    "get_user_id\030\002 \001(\0132\027.ssp.GetUserIdByNameR"
    "eq\022\'\n\013create_user\030\003 \001(\0132\022.ssp.CreateUser"
    "Req\022\'\n\013login_check\030\004 \001(\0132\022.ssp.LoginChec"
    "kReq\0220\n\020check_user_exist\030\005 \001(\0132\026.ssp.Che"
    "ckUserExistReq\"\343\001\n\017UserToServerRsp\022\036\n\006he"
    "ader\030\001 \001(\0132\016.ssp.MsgHeader\022,\n\013get_user_i"
    "d\030\002 \001(\0132\027.ssp.GetUserIdByNameRsp\022\'\n\013crea"
    "te_user\030\003 \001(\0132\022.ssp.CreateUserRsp\022\'\n\013log"
    "in_check\030\004 \001(\0132\022.ssp.LoginCheckRsp\0220\n\020ch"
    "eck_user_exist\030\005 \001(\0132\026.ssp.CheckUserExis"
    "tRsp", 3204);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message_define.proto", &protobuf_RegisterTypes);
  MsgHeader::default_instance_ = new MsgHeader();
  RegReq::default_instance_ = new RegReq();
  RegRsp::default_instance_ = new RegRsp();
  LoginReq::default_instance_ = new LoginReq();
  LoginRsp::default_instance_ = new LoginRsp();
  LogoutReq::default_instance_ = new LogoutReq();
  LogoutRsp::default_instance_ = new LogoutRsp();
  AddFriendReq::default_instance_ = new AddFriendReq();
  AddFriendRsp::default_instance_ = new AddFriendRsp();
  DelFriendReq::default_instance_ = new DelFriendReq();
  DelFriendRsp::default_instance_ = new DelFriendRsp();
  PublishMessageReq::default_instance_ = new PublishMessageReq();
  PublishMessageRsp::default_instance_ = new PublishMessageRsp();
  GetMessageListReq::default_instance_ = new GetMessageListReq();
  MessageItem::default_instance_ = new MessageItem();
  GetMessageListRsp::default_instance_ = new GetMessageListRsp();
  GetPhotoReq::default_instance_ = new GetPhotoReq();
  GetPhotoRsp::default_instance_ = new GetPhotoRsp();
  CommonReq::default_instance_ = new CommonReq();
  CommonRsp::default_instance_ = new CommonRsp();
  GetUserIdByNameReq::default_instance_ = new GetUserIdByNameReq();
  GetUserIdByNameRsp::default_instance_ = new GetUserIdByNameRsp();
  CreateUserReq::default_instance_ = new CreateUserReq();
  CreateUserRsp::default_instance_ = new CreateUserRsp();
  LoginCheckReq::default_instance_ = new LoginCheckReq();
  LoginCheckRsp::default_instance_ = new LoginCheckRsp();
  CheckUserExistReq::default_instance_ = new CheckUserExistReq();
  CheckUserExistRsp::default_instance_ = new CheckUserExistRsp();
  ServerToUserReq::default_instance_ = new ServerToUserReq();
  UserToServerRsp::default_instance_ = new UserToServerRsp();
  MsgHeader::default_instance_->InitAsDefaultInstance();
  RegReq::default_instance_->InitAsDefaultInstance();
  RegRsp::default_instance_->InitAsDefaultInstance();
  LoginReq::default_instance_->InitAsDefaultInstance();
  LoginRsp::default_instance_->InitAsDefaultInstance();
  LogoutReq::default_instance_->InitAsDefaultInstance();
  LogoutRsp::default_instance_->InitAsDefaultInstance();
  AddFriendReq::default_instance_->InitAsDefaultInstance();
  AddFriendRsp::default_instance_->InitAsDefaultInstance();
  DelFriendReq::default_instance_->InitAsDefaultInstance();
  DelFriendRsp::default_instance_->InitAsDefaultInstance();
  PublishMessageReq::default_instance_->InitAsDefaultInstance();
  PublishMessageRsp::default_instance_->InitAsDefaultInstance();
  GetMessageListReq::default_instance_->InitAsDefaultInstance();
  MessageItem::default_instance_->InitAsDefaultInstance();
  GetMessageListRsp::default_instance_->InitAsDefaultInstance();
  GetPhotoReq::default_instance_->InitAsDefaultInstance();
  GetPhotoRsp::default_instance_->InitAsDefaultInstance();
  CommonReq::default_instance_->InitAsDefaultInstance();
  CommonRsp::default_instance_->InitAsDefaultInstance();
  GetUserIdByNameReq::default_instance_->InitAsDefaultInstance();
  GetUserIdByNameRsp::default_instance_->InitAsDefaultInstance();
  CreateUserReq::default_instance_->InitAsDefaultInstance();
  CreateUserRsp::default_instance_->InitAsDefaultInstance();
  LoginCheckReq::default_instance_->InitAsDefaultInstance();
  LoginCheckRsp::default_instance_->InitAsDefaultInstance();
  CheckUserExistReq::default_instance_->InitAsDefaultInstance();
  CheckUserExistRsp::default_instance_->InitAsDefaultInstance();
  ServerToUserReq::default_instance_->InitAsDefaultInstance();
  UserToServerRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_5fdefine_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_5fdefine_2eproto {
  StaticDescriptorInitializer_message_5fdefine_2eproto() {
    protobuf_AddDesc_message_5fdefine_2eproto();
  }
} static_descriptor_initializer_message_5fdefine_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MsgHeader::kVerFieldNumber;
const int MsgHeader::kCmdTypeFieldNumber;
#endif  // !_MSC_VER

MsgHeader::MsgHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgHeader::InitAsDefaultInstance() {
}

MsgHeader::MsgHeader(const MsgHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgHeader::SharedCtor() {
  _cached_size_ = 0;
  ver_ = 0u;
  cmd_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgHeader::~MsgHeader() {
  SharedDtor();
}

void MsgHeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgHeader_descriptor_;
}

const MsgHeader& MsgHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fdefine_2eproto();
  return *default_instance_;
}

MsgHeader* MsgHeader::default_instance_ = NULL;

MsgHeader* MsgHeader::New() const {
  return new MsgHeader;
}

void MsgHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ver_ = 0u;
    cmd_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ver = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ver_)));
          set_has_ver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cmd_type;
        break;
      }

      // optional uint32 cmd_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_type_)));
          set_has_cmd_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ver = 1;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ver(), output);
  }

  // optional uint32 cmd_type = 2;
  if (has_cmd_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cmd_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ver = 1;
  if (has_ver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ver(), target);
  }

  // optional uint32 cmd_type = 2;
  if (has_cmd_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cmd_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ver = 1;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ver());
    }

    // optional uint32 cmd_type = 2;
    if (has_cmd_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgHeader::MergeFrom(const MsgHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ver()) {
      set_ver(from.ver());
    }
    if (from.has_cmd_type()) {
      set_cmd_type(from.cmd_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgHeader::CopyFrom(const MsgHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgHeader::IsInitialized() const {

  return true;
}

void MsgHeader::Swap(MsgHeader* other) {
  if (other != this) {
    std::swap(ver_, other->ver_);
    std::swap(cmd_type_, other->cmd_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgHeader_descriptor_;
  metadata.reflection = MsgHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegReq::kHeaderFieldNumber;
const int RegReq::kUserNameFieldNumber;
const int RegReq::kPasswordFieldNumber;
const int RegReq::kFromFieldNumber;
#endif  // !_MSC_VER

RegReq::RegReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegReq::InitAsDefaultInstance() {
  header_ = const_cast< ::ssp::MsgHeader*>(&::ssp::MsgHeader::default_instance());
}

RegReq::RegReq(const RegReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegReq::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  from_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegReq::~RegReq() {
  SharedDtor();
}

void RegReq::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

void RegReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegReq_descriptor_;
}

const RegReq& RegReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fdefine_2eproto();
  return *default_instance_;
}

RegReq* RegReq::default_instance_ = NULL;

RegReq* RegReq::New() const {
  return new RegReq;
}

void RegReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::ssp::MsgHeader::Clear();
    }
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    from_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user_name;
        break;
      }

      // optional string user_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_password;
        break;
      }

      // optional string password = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_from;
        break;
      }

      // optional uint32 from = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_)));
          set_has_from();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ssp.MsgHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional string user_name = 3;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user_name(), output);
  }

  // optional string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->password(), output);
  }

  // optional uint32 from = 5;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->from(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ssp.MsgHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional string user_name = 3;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_name(), target);
  }

  // optional string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->password(), target);
  }

  // optional uint32 from = 5;
  if (has_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->from(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional string user_name = 3;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional string password = 4;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional uint32 from = 5;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegReq::MergeFrom(const RegReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_from()) {
      set_from(from.from());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegReq::CopyFrom(const RegReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegReq::IsInitialized() const {

  return true;
}

void RegReq::Swap(RegReq* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(user_name_, other->user_name_);
    std::swap(password_, other->password_);
    std::swap(from_, other->from_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegReq_descriptor_;
  metadata.reflection = RegReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegRsp::kHeaderFieldNumber;
const int RegRsp::kRetFieldNumber;
const int RegRsp::kUserIdFieldNumber;
#endif  // !_MSC_VER

RegRsp::RegRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegRsp::InitAsDefaultInstance() {
  header_ = const_cast< ::ssp::MsgHeader*>(&::ssp::MsgHeader::default_instance());
}

RegRsp::RegRsp(const RegRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegRsp::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ret_ = 0u;
  user_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegRsp::~RegRsp() {
  SharedDtor();
}

void RegRsp::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void RegRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegRsp_descriptor_;
}

const RegRsp& RegRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fdefine_2eproto();
  return *default_instance_;
}

RegRsp* RegRsp::default_instance_ = NULL;

RegRsp* RegRsp::New() const {
  return new RegRsp;
}

void RegRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::ssp::MsgHeader::Clear();
    }
    ret_ = 0u;
    user_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_user_id;
        break;
      }

      // optional uint32 user_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ssp.MsgHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ret(), output);
  }

  // optional uint32 user_id = 4;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ssp.MsgHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ret(), target);
  }

  // optional uint32 user_id = 4;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional uint32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint32 user_id = 4;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegRsp::MergeFrom(const RegRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegRsp::CopyFrom(const RegRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegRsp::IsInitialized() const {

  return true;
}

void RegRsp::Swap(RegRsp* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(ret_, other->ret_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegRsp_descriptor_;
  metadata.reflection = RegRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginReq::kVerFieldNumber;
const int LoginReq::kCmdTypeFieldNumber;
const int LoginReq::kUserNameFieldNumber;
const int LoginReq::kPasswordFieldNumber;
#endif  // !_MSC_VER

LoginReq::LoginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginReq::InitAsDefaultInstance() {
}

LoginReq::LoginReq(const LoginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginReq::SharedCtor() {
  _cached_size_ = 0;
  ver_ = 0u;
  cmd_type_ = 0u;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginReq::~LoginReq() {
  SharedDtor();
}

void LoginReq::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void LoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginReq_descriptor_;
}

const LoginReq& LoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fdefine_2eproto();
  return *default_instance_;
}

LoginReq* LoginReq::default_instance_ = NULL;

LoginReq* LoginReq::New() const {
  return new LoginReq;
}

void LoginReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ver_ = 0u;
    cmd_type_ = 0u;
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ver = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ver_)));
          set_has_ver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cmd_type;
        break;
      }

      // optional uint32 cmd_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_type_)));
          set_has_cmd_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user_name;
        break;
      }

      // optional string user_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_password;
        break;
      }

      // optional string password = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ver = 1;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ver(), output);
  }

  // optional uint32 cmd_type = 2;
  if (has_cmd_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cmd_type(), output);
  }

  // optional string user_name = 3;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user_name(), output);
  }

  // optional string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ver = 1;
  if (has_ver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ver(), target);
  }

  // optional uint32 cmd_type = 2;
  if (has_cmd_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cmd_type(), target);
  }

  // optional string user_name = 3;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_name(), target);
  }

  // optional string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ver = 1;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ver());
    }

    // optional uint32 cmd_type = 2;
    if (has_cmd_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd_type());
    }

    // optional string user_name = 3;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional string password = 4;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginReq::MergeFrom(const LoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ver()) {
      set_ver(from.ver());
    }
    if (from.has_cmd_type()) {
      set_cmd_type(from.cmd_type());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginReq::CopyFrom(const LoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginReq::IsInitialized() const {

  return true;
}

void LoginReq::Swap(LoginReq* other) {
  if (other != this) {
    std::swap(ver_, other->ver_);
    std::swap(cmd_type_, other->cmd_type_);
    std::swap(user_name_, other->user_name_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginReq_descriptor_;
  metadata.reflection = LoginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRsp::kVerFieldNumber;
const int LoginRsp::kCmdTypeFieldNumber;
const int LoginRsp::kRetFieldNumber;
const int LoginRsp::kUserIdFieldNumber;
#endif  // !_MSC_VER

LoginRsp::LoginRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginRsp::InitAsDefaultInstance() {
}

LoginRsp::LoginRsp(const LoginRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginRsp::SharedCtor() {
  _cached_size_ = 0;
  ver_ = 0u;
  cmd_type_ = 0u;
  ret_ = 0u;
  user_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRsp::~LoginRsp() {
  SharedDtor();
}

void LoginRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRsp_descriptor_;
}

const LoginRsp& LoginRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fdefine_2eproto();
  return *default_instance_;
}

LoginRsp* LoginRsp::default_instance_ = NULL;

LoginRsp* LoginRsp::New() const {
  return new LoginRsp;
}

void LoginRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ver_ = 0u;
    cmd_type_ = 0u;
    ret_ = 0u;
    user_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ver = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ver_)));
          set_has_ver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cmd_type;
        break;
      }

      // optional uint32 cmd_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_type_)));
          set_has_cmd_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_user_id;
        break;
      }

      // optional uint32 user_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ver = 1;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ver(), output);
  }

  // optional uint32 cmd_type = 2;
  if (has_cmd_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cmd_type(), output);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ret(), output);
  }

  // optional uint32 user_id = 4;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ver = 1;
  if (has_ver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ver(), target);
  }

  // optional uint32 cmd_type = 2;
  if (has_cmd_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cmd_type(), target);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ret(), target);
  }

  // optional uint32 user_id = 4;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ver = 1;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ver());
    }

    // optional uint32 cmd_type = 2;
    if (has_cmd_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd_type());
    }

    // optional uint32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint32 user_id = 4;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRsp::MergeFrom(const LoginRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ver()) {
      set_ver(from.ver());
    }
    if (from.has_cmd_type()) {
      set_cmd_type(from.cmd_type());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRsp::CopyFrom(const LoginRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRsp::IsInitialized() const {

  return true;
}

void LoginRsp::Swap(LoginRsp* other) {
  if (other != this) {
    std::swap(ver_, other->ver_);
    std::swap(cmd_type_, other->cmd_type_);
    std::swap(ret_, other->ret_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRsp_descriptor_;
  metadata.reflection = LoginRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogoutReq::kUserIdFieldNumber;
#endif  // !_MSC_VER

LogoutReq::LogoutReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogoutReq::InitAsDefaultInstance() {
}

LogoutReq::LogoutReq(const LogoutReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogoutReq::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogoutReq::~LogoutReq() {
  SharedDtor();
}

void LogoutReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogoutReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogoutReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogoutReq_descriptor_;
}

const LogoutReq& LogoutReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fdefine_2eproto();
  return *default_instance_;
}

LogoutReq* LogoutReq::default_instance_ = NULL;

LogoutReq* LogoutReq::New() const {
  return new LogoutReq;
}

void LogoutReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogoutReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogoutReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 user_id = 3;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogoutReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 user_id = 3;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogoutReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogoutReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogoutReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogoutReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogoutReq::MergeFrom(const LogoutReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogoutReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutReq::CopyFrom(const LogoutReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutReq::IsInitialized() const {

  return true;
}

void LogoutReq::Swap(LogoutReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogoutReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogoutReq_descriptor_;
  metadata.reflection = LogoutReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogoutRsp::kRetFieldNumber;
#endif  // !_MSC_VER

LogoutRsp::LogoutRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogoutRsp::InitAsDefaultInstance() {
}

LogoutRsp::LogoutRsp(const LogoutRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogoutRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogoutRsp::~LogoutRsp() {
  SharedDtor();
}

void LogoutRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogoutRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogoutRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogoutRsp_descriptor_;
}

const LogoutRsp& LogoutRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fdefine_2eproto();
  return *default_instance_;
}

LogoutRsp* LogoutRsp::default_instance_ = NULL;

LogoutRsp* LogoutRsp::New() const {
  return new LogoutRsp;
}

void LogoutRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogoutRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogoutRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogoutRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogoutRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogoutRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogoutRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogoutRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogoutRsp::MergeFrom(const LogoutRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogoutRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutRsp::CopyFrom(const LogoutRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutRsp::IsInitialized() const {

  return true;
}

void LogoutRsp::Swap(LogoutRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogoutRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogoutRsp_descriptor_;
  metadata.reflection = LogoutRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddFriendReq::kHeaderFieldNumber;
const int AddFriendReq::kUserIdFieldNumber;
const int AddFriendReq::kOtherIdFieldNumber;
#endif  // !_MSC_VER

AddFriendReq::AddFriendReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddFriendReq::InitAsDefaultInstance() {
  header_ = const_cast< ::ssp::MsgHeader*>(&::ssp::MsgHeader::default_instance());
}

AddFriendReq::AddFriendReq(const AddFriendReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddFriendReq::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  user_id_ = 0u;
  other_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddFriendReq::~AddFriendReq() {
  SharedDtor();
}

void AddFriendReq::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void AddFriendReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddFriendReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddFriendReq_descriptor_;
}

const AddFriendReq& AddFriendReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fdefine_2eproto();
  return *default_instance_;
}

AddFriendReq* AddFriendReq::default_instance_ = NULL;

AddFriendReq* AddFriendReq::New() const {
  return new AddFriendReq;
}

void AddFriendReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::ssp::MsgHeader::Clear();
    }
    user_id_ = 0u;
    other_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddFriendReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_other_id;
        break;
      }

      // optional uint32 other_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_other_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &other_id_)));
          set_has_other_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddFriendReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ssp.MsgHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // optional uint32 other_id = 3;
  if (has_other_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->other_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddFriendReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ssp.MsgHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional uint32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_id(), target);
  }

  // optional uint32 other_id = 3;
  if (has_other_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->other_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddFriendReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional uint32 other_id = 3;
    if (has_other_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->other_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddFriendReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddFriendReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddFriendReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddFriendReq::MergeFrom(const AddFriendReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_other_id()) {
      set_other_id(from.other_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddFriendReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFriendReq::CopyFrom(const AddFriendReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFriendReq::IsInitialized() const {

  return true;
}

void AddFriendReq::Swap(AddFriendReq* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(user_id_, other->user_id_);
    std::swap(other_id_, other->other_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddFriendReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddFriendReq_descriptor_;
  metadata.reflection = AddFriendReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddFriendRsp::kHeaderFieldNumber;
const int AddFriendRsp::kRetFieldNumber;
#endif  // !_MSC_VER

AddFriendRsp::AddFriendRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddFriendRsp::InitAsDefaultInstance() {
  header_ = const_cast< ::ssp::MsgHeader*>(&::ssp::MsgHeader::default_instance());
}

AddFriendRsp::AddFriendRsp(const AddFriendRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddFriendRsp::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddFriendRsp::~AddFriendRsp() {
  SharedDtor();
}

void AddFriendRsp::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void AddFriendRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddFriendRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddFriendRsp_descriptor_;
}

const AddFriendRsp& AddFriendRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fdefine_2eproto();
  return *default_instance_;
}

AddFriendRsp* AddFriendRsp::default_instance_ = NULL;

AddFriendRsp* AddFriendRsp::New() const {
  return new AddFriendRsp;
}

void AddFriendRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::ssp::MsgHeader::Clear();
    }
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddFriendRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddFriendRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ssp.MsgHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddFriendRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ssp.MsgHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddFriendRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddFriendRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddFriendRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddFriendRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddFriendRsp::MergeFrom(const AddFriendRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddFriendRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFriendRsp::CopyFrom(const AddFriendRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFriendRsp::IsInitialized() const {

  return true;
}

void AddFriendRsp::Swap(AddFriendRsp* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddFriendRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddFriendRsp_descriptor_;
  metadata.reflection = AddFriendRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DelFriendReq::kHeaderFieldNumber;
const int DelFriendReq::kUserIdFieldNumber;
const int DelFriendReq::kOtherIdFieldNumber;
#endif  // !_MSC_VER

DelFriendReq::DelFriendReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DelFriendReq::InitAsDefaultInstance() {
  header_ = const_cast< ::ssp::MsgHeader*>(&::ssp::MsgHeader::default_instance());
}

DelFriendReq::DelFriendReq(const DelFriendReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DelFriendReq::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  user_id_ = 0u;
  other_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DelFriendReq::~DelFriendReq() {
  SharedDtor();
}

void DelFriendReq::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void DelFriendReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelFriendReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelFriendReq_descriptor_;
}

const DelFriendReq& DelFriendReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fdefine_2eproto();
  return *default_instance_;
}

DelFriendReq* DelFriendReq::default_instance_ = NULL;

DelFriendReq* DelFriendReq::New() const {
  return new DelFriendReq;
}

void DelFriendReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::ssp::MsgHeader::Clear();
    }
    user_id_ = 0u;
    other_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DelFriendReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_other_id;
        break;
      }

      // optional uint32 other_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_other_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &other_id_)));
          set_has_other_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DelFriendReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ssp.MsgHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // optional uint32 other_id = 3;
  if (has_other_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->other_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DelFriendReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ssp.MsgHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional uint32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_id(), target);
  }

  // optional uint32 other_id = 3;
  if (has_other_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->other_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DelFriendReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional uint32 other_id = 3;
    if (has_other_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->other_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelFriendReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DelFriendReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DelFriendReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DelFriendReq::MergeFrom(const DelFriendReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_other_id()) {
      set_other_id(from.other_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DelFriendReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelFriendReq::CopyFrom(const DelFriendReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelFriendReq::IsInitialized() const {

  return true;
}

void DelFriendReq::Swap(DelFriendReq* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(user_id_, other->user_id_);
    std::swap(other_id_, other->other_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DelFriendReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelFriendReq_descriptor_;
  metadata.reflection = DelFriendReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DelFriendRsp::kHeaderFieldNumber;
const int DelFriendRsp::kRetFieldNumber;
#endif  // !_MSC_VER

DelFriendRsp::DelFriendRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DelFriendRsp::InitAsDefaultInstance() {
  header_ = const_cast< ::ssp::MsgHeader*>(&::ssp::MsgHeader::default_instance());
}

DelFriendRsp::DelFriendRsp(const DelFriendRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DelFriendRsp::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DelFriendRsp::~DelFriendRsp() {
  SharedDtor();
}

void DelFriendRsp::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void DelFriendRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelFriendRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelFriendRsp_descriptor_;
}

const DelFriendRsp& DelFriendRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fdefine_2eproto();
  return *default_instance_;
}

DelFriendRsp* DelFriendRsp::default_instance_ = NULL;

DelFriendRsp* DelFriendRsp::New() const {
  return new DelFriendRsp;
}

void DelFriendRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::ssp::MsgHeader::Clear();
    }
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DelFriendRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DelFriendRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ssp.MsgHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DelFriendRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ssp.MsgHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DelFriendRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelFriendRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DelFriendRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DelFriendRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DelFriendRsp::MergeFrom(const DelFriendRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DelFriendRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelFriendRsp::CopyFrom(const DelFriendRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelFriendRsp::IsInitialized() const {

  return true;
}

void DelFriendRsp::Swap(DelFriendRsp* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DelFriendRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelFriendRsp_descriptor_;
  metadata.reflection = DelFriendRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PublishMessageReq::kHeaderFieldNumber;
const int PublishMessageReq::kUserIdFieldNumber;
const int PublishMessageReq::kContentFieldNumber;
#endif  // !_MSC_VER

PublishMessageReq::PublishMessageReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PublishMessageReq::InitAsDefaultInstance() {
  header_ = const_cast< ::ssp::MsgHeader*>(&::ssp::MsgHeader::default_instance());
}

PublishMessageReq::PublishMessageReq(const PublishMessageReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PublishMessageReq::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  user_id_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PublishMessageReq::~PublishMessageReq() {
  SharedDtor();
}

void PublishMessageReq::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

void PublishMessageReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublishMessageReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PublishMessageReq_descriptor_;
}

const PublishMessageReq& PublishMessageReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fdefine_2eproto();
  return *default_instance_;
}

PublishMessageReq* PublishMessageReq::default_instance_ = NULL;

PublishMessageReq* PublishMessageReq::New() const {
  return new PublishMessageReq;
}

void PublishMessageReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::ssp::MsgHeader::Clear();
    }
    user_id_ = 0u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PublishMessageReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // optional string content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PublishMessageReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ssp.MsgHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PublishMessageReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ssp.MsgHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional uint32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_id(), target);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PublishMessageReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublishMessageReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PublishMessageReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PublishMessageReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PublishMessageReq::MergeFrom(const PublishMessageReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PublishMessageReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishMessageReq::CopyFrom(const PublishMessageReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishMessageReq::IsInitialized() const {

  return true;
}

void PublishMessageReq::Swap(PublishMessageReq* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(user_id_, other->user_id_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PublishMessageReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PublishMessageReq_descriptor_;
  metadata.reflection = PublishMessageReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PublishMessageRsp::kHeaderFieldNumber;
const int PublishMessageRsp::kRetFieldNumber;
#endif  // !_MSC_VER

PublishMessageRsp::PublishMessageRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PublishMessageRsp::InitAsDefaultInstance() {
  header_ = const_cast< ::ssp::MsgHeader*>(&::ssp::MsgHeader::default_instance());
}

PublishMessageRsp::PublishMessageRsp(const PublishMessageRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PublishMessageRsp::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PublishMessageRsp::~PublishMessageRsp() {
  SharedDtor();
}

void PublishMessageRsp::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void PublishMessageRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublishMessageRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PublishMessageRsp_descriptor_;
}

const PublishMessageRsp& PublishMessageRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fdefine_2eproto();
  return *default_instance_;
}

PublishMessageRsp* PublishMessageRsp::default_instance_ = NULL;

PublishMessageRsp* PublishMessageRsp::New() const {
  return new PublishMessageRsp;
}

void PublishMessageRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::ssp::MsgHeader::Clear();
    }
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PublishMessageRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PublishMessageRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ssp.MsgHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PublishMessageRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ssp.MsgHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PublishMessageRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublishMessageRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PublishMessageRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PublishMessageRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PublishMessageRsp::MergeFrom(const PublishMessageRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PublishMessageRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishMessageRsp::CopyFrom(const PublishMessageRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishMessageRsp::IsInitialized() const {

  return true;
}

void PublishMessageRsp::Swap(PublishMessageRsp* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PublishMessageRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PublishMessageRsp_descriptor_;
  metadata.reflection = PublishMessageRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetMessageListReq::kHeaderFieldNumber;
const int GetMessageListReq::kUserIdFieldNumber;
#endif  // !_MSC_VER

GetMessageListReq::GetMessageListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetMessageListReq::InitAsDefaultInstance() {
  header_ = const_cast< ::ssp::MsgHeader*>(&::ssp::MsgHeader::default_instance());
}

GetMessageListReq::GetMessageListReq(const GetMessageListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetMessageListReq::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  user_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMessageListReq::~GetMessageListReq() {
  SharedDtor();
}

void GetMessageListReq::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void GetMessageListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMessageListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMessageListReq_descriptor_;
}

const GetMessageListReq& GetMessageListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fdefine_2eproto();
  return *default_instance_;
}

GetMessageListReq* GetMessageListReq::default_instance_ = NULL;

GetMessageListReq* GetMessageListReq::New() const {
  return new GetMessageListReq;
}

void GetMessageListReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::ssp::MsgHeader::Clear();
    }
    user_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetMessageListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetMessageListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ssp.MsgHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetMessageListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ssp.MsgHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional uint32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetMessageListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMessageListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetMessageListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetMessageListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetMessageListReq::MergeFrom(const GetMessageListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetMessageListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMessageListReq::CopyFrom(const GetMessageListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMessageListReq::IsInitialized() const {

  return true;
}

void GetMessageListReq::Swap(GetMessageListReq* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetMessageListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMessageListReq_descriptor_;
  metadata.reflection = GetMessageListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessageItem::kPublisherIdFieldNumber;
const int MessageItem::kPublishTimeFieldNumber;
const int MessageItem::kContentFieldNumber;
#endif  // !_MSC_VER

MessageItem::MessageItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MessageItem::InitAsDefaultInstance() {
}

MessageItem::MessageItem(const MessageItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MessageItem::SharedCtor() {
  _cached_size_ = 0;
  publisher_id_ = 0u;
  publish_time_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageItem::~MessageItem() {
  SharedDtor();
}

void MessageItem::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void MessageItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageItem_descriptor_;
}

const MessageItem& MessageItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fdefine_2eproto();
  return *default_instance_;
}

MessageItem* MessageItem::default_instance_ = NULL;

MessageItem* MessageItem::New() const {
  return new MessageItem;
}

void MessageItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    publisher_id_ = 0u;
    publish_time_ = 0u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 publisher_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &publisher_id_)));
          set_has_publisher_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_publish_time;
        break;
      }

      // optional uint32 publish_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_publish_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &publish_time_)));
          set_has_publish_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // optional string content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MessageItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 publisher_id = 1;
  if (has_publisher_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->publisher_id(), output);
  }

  // optional uint32 publish_time = 2;
  if (has_publish_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->publish_time(), output);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MessageItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 publisher_id = 1;
  if (has_publisher_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->publisher_id(), target);
  }

  // optional uint32 publish_time = 2;
  if (has_publish_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->publish_time(), target);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MessageItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 publisher_id = 1;
    if (has_publisher_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->publisher_id());
    }

    // optional uint32 publish_time = 2;
    if (has_publish_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->publish_time());
    }

    // optional string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageItem::MergeFrom(const MessageItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_publisher_id()) {
      set_publisher_id(from.publisher_id());
    }
    if (from.has_publish_time()) {
      set_publish_time(from.publish_time());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageItem::CopyFrom(const MessageItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageItem::IsInitialized() const {

  return true;
}

void MessageItem::Swap(MessageItem* other) {
  if (other != this) {
    std::swap(publisher_id_, other->publisher_id_);
    std::swap(publish_time_, other->publish_time_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageItem_descriptor_;
  metadata.reflection = MessageItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetMessageListRsp::kHeaderFieldNumber;
const int GetMessageListRsp::kRetFieldNumber;
const int GetMessageListRsp::kMessageListFieldNumber;
#endif  // !_MSC_VER

GetMessageListRsp::GetMessageListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetMessageListRsp::InitAsDefaultInstance() {
  header_ = const_cast< ::ssp::MsgHeader*>(&::ssp::MsgHeader::default_instance());
}

GetMessageListRsp::GetMessageListRsp(const GetMessageListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetMessageListRsp::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMessageListRsp::~GetMessageListRsp() {
  SharedDtor();
}

void GetMessageListRsp::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void GetMessageListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMessageListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMessageListRsp_descriptor_;
}

const GetMessageListRsp& GetMessageListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fdefine_2eproto();
  return *default_instance_;
}

GetMessageListRsp* GetMessageListRsp::default_instance_ = NULL;

GetMessageListRsp* GetMessageListRsp::New() const {
  return new GetMessageListRsp;
}

void GetMessageListRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::ssp::MsgHeader::Clear();
    }
    ret_ = 0u;
  }
  message_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetMessageListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_message_list;
        break;
      }

      // repeated .ssp.MessageItem message_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_message_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_message_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetMessageListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ssp.MsgHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // repeated .ssp.MessageItem message_list = 3;
  for (int i = 0; i < this->message_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->message_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetMessageListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ssp.MsgHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // repeated .ssp.MessageItem message_list = 3;
  for (int i = 0; i < this->message_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->message_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetMessageListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  // repeated .ssp.MessageItem message_list = 3;
  total_size += 1 * this->message_list_size();
  for (int i = 0; i < this->message_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->message_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMessageListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetMessageListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetMessageListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetMessageListRsp::MergeFrom(const GetMessageListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  message_list_.MergeFrom(from.message_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetMessageListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMessageListRsp::CopyFrom(const GetMessageListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMessageListRsp::IsInitialized() const {

  return true;
}

void GetMessageListRsp::Swap(GetMessageListRsp* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(ret_, other->ret_);
    message_list_.Swap(&other->message_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetMessageListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMessageListRsp_descriptor_;
  metadata.reflection = GetMessageListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetPhotoReq::kHeaderFieldNumber;
const int GetPhotoReq::kUserIdFieldNumber;
#endif  // !_MSC_VER

GetPhotoReq::GetPhotoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetPhotoReq::InitAsDefaultInstance() {
  header_ = const_cast< ::ssp::MsgHeader*>(&::ssp::MsgHeader::default_instance());
}

GetPhotoReq::GetPhotoReq(const GetPhotoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetPhotoReq::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  user_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPhotoReq::~GetPhotoReq() {
  SharedDtor();
}

void GetPhotoReq::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void GetPhotoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPhotoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPhotoReq_descriptor_;
}

const GetPhotoReq& GetPhotoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fdefine_2eproto();
  return *default_instance_;
}

GetPhotoReq* GetPhotoReq::default_instance_ = NULL;

GetPhotoReq* GetPhotoReq::New() const {
  return new GetPhotoReq;
}

void GetPhotoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::ssp::MsgHeader::Clear();
    }
    user_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPhotoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetPhotoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ssp.MsgHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetPhotoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ssp.MsgHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional uint32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetPhotoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPhotoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPhotoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPhotoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPhotoReq::MergeFrom(const GetPhotoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPhotoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPhotoReq::CopyFrom(const GetPhotoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPhotoReq::IsInitialized() const {

  return true;
}

void GetPhotoReq::Swap(GetPhotoReq* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPhotoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPhotoReq_descriptor_;
  metadata.reflection = GetPhotoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetPhotoRsp::kHeaderFieldNumber;
const int GetPhotoRsp::kRetFieldNumber;
const int GetPhotoRsp::kLastPublisherIdFieldNumber;
const int GetPhotoRsp::kLastPublisherTimeFieldNumber;
const int GetPhotoRsp::kLastUserGetTimeFieldNumber;
#endif  // !_MSC_VER

GetPhotoRsp::GetPhotoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetPhotoRsp::InitAsDefaultInstance() {
  header_ = const_cast< ::ssp::MsgHeader*>(&::ssp::MsgHeader::default_instance());
}

GetPhotoRsp::GetPhotoRsp(const GetPhotoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetPhotoRsp::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ret_ = 0u;
  last_publisher_id_ = 0u;
  last_publisher_time_ = 0u;
  last_user_get_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPhotoRsp::~GetPhotoRsp() {
  SharedDtor();
}

void GetPhotoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void GetPhotoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPhotoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPhotoRsp_descriptor_;
}

const GetPhotoRsp& GetPhotoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fdefine_2eproto();
  return *default_instance_;
}

GetPhotoRsp* GetPhotoRsp::default_instance_ = NULL;

GetPhotoRsp* GetPhotoRsp::New() const {
  return new GetPhotoRsp;
}

void GetPhotoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::ssp::MsgHeader::Clear();
    }
    ret_ = 0u;
    last_publisher_id_ = 0u;
    last_publisher_time_ = 0u;
    last_user_get_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPhotoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last_publisher_id;
        break;
      }

      // optional uint32 last_publisher_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_publisher_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_publisher_id_)));
          set_has_last_publisher_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_publisher_time;
        break;
      }

      // optional uint32 last_publisher_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_publisher_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_publisher_time_)));
          set_has_last_publisher_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_last_user_get_time;
        break;
      }

      // optional uint32 last_user_get_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_user_get_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_user_get_time_)));
          set_has_last_user_get_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetPhotoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ssp.MsgHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // optional uint32 last_publisher_id = 3;
  if (has_last_publisher_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->last_publisher_id(), output);
  }

  // optional uint32 last_publisher_time = 4;
  if (has_last_publisher_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_publisher_time(), output);
  }

  // optional uint32 last_user_get_time = 5;
  if (has_last_user_get_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->last_user_get_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetPhotoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ssp.MsgHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // optional uint32 last_publisher_id = 3;
  if (has_last_publisher_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->last_publisher_id(), target);
  }

  // optional uint32 last_publisher_time = 4;
  if (has_last_publisher_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_publisher_time(), target);
  }

  // optional uint32 last_user_get_time = 5;
  if (has_last_user_get_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->last_user_get_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetPhotoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint32 last_publisher_id = 3;
    if (has_last_publisher_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_publisher_id());
    }

    // optional uint32 last_publisher_time = 4;
    if (has_last_publisher_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_publisher_time());
    }

    // optional uint32 last_user_get_time = 5;
    if (has_last_user_get_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_user_get_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPhotoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPhotoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPhotoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPhotoRsp::MergeFrom(const GetPhotoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_last_publisher_id()) {
      set_last_publisher_id(from.last_publisher_id());
    }
    if (from.has_last_publisher_time()) {
      set_last_publisher_time(from.last_publisher_time());
    }
    if (from.has_last_user_get_time()) {
      set_last_user_get_time(from.last_user_get_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPhotoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPhotoRsp::CopyFrom(const GetPhotoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPhotoRsp::IsInitialized() const {

  return true;
}

void GetPhotoRsp::Swap(GetPhotoRsp* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(ret_, other->ret_);
    std::swap(last_publisher_id_, other->last_publisher_id_);
    std::swap(last_publisher_time_, other->last_publisher_time_);
    std::swap(last_user_get_time_, other->last_user_get_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPhotoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPhotoRsp_descriptor_;
  metadata.reflection = GetPhotoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommonReq::kHeaderFieldNumber;
const int CommonReq::kRegReqFieldNumber;
const int CommonReq::kLoginReqFieldNumber;
const int CommonReq::kLogoutReqFieldNumber;
const int CommonReq::kAddFriendReqFieldNumber;
const int CommonReq::kDelFriendReqFieldNumber;
const int CommonReq::kPublishMessageReqFieldNumber;
const int CommonReq::kGetMessageListReqFieldNumber;
const int CommonReq::kGetPhotoReqFieldNumber;
#endif  // !_MSC_VER

CommonReq::CommonReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommonReq::InitAsDefaultInstance() {
  header_ = const_cast< ::ssp::MsgHeader*>(&::ssp::MsgHeader::default_instance());
  reg_req_ = const_cast< ::ssp::RegReq*>(&::ssp::RegReq::default_instance());
  login_req_ = const_cast< ::ssp::LoginReq*>(&::ssp::LoginReq::default_instance());
  logout_req_ = const_cast< ::ssp::LogoutReq*>(&::ssp::LogoutReq::default_instance());
  add_friend_req_ = const_cast< ::ssp::AddFriendReq*>(&::ssp::AddFriendReq::default_instance());
  del_friend_req_ = const_cast< ::ssp::DelFriendReq*>(&::ssp::DelFriendReq::default_instance());
  publish_message_req_ = const_cast< ::ssp::PublishMessageReq*>(&::ssp::PublishMessageReq::default_instance());
  get_message_list_req_ = const_cast< ::ssp::GetMessageListReq*>(&::ssp::GetMessageListReq::default_instance());
  get_photo_req_ = const_cast< ::ssp::GetPhotoReq*>(&::ssp::GetPhotoReq::default_instance());
}

CommonReq::CommonReq(const CommonReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommonReq::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  reg_req_ = NULL;
  login_req_ = NULL;
  logout_req_ = NULL;
  add_friend_req_ = NULL;
  del_friend_req_ = NULL;
  publish_message_req_ = NULL;
  get_message_list_req_ = NULL;
  get_photo_req_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommonReq::~CommonReq() {
  SharedDtor();
}

void CommonReq::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete reg_req_;
    delete login_req_;
    delete logout_req_;
    delete add_friend_req_;
    delete del_friend_req_;
    delete publish_message_req_;
    delete get_message_list_req_;
    delete get_photo_req_;
  }
}

void CommonReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonReq_descriptor_;
}

const CommonReq& CommonReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fdefine_2eproto();
  return *default_instance_;
}

CommonReq* CommonReq::default_instance_ = NULL;

CommonReq* CommonReq::New() const {
  return new CommonReq;
}

void CommonReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::ssp::MsgHeader::Clear();
    }
    if (has_reg_req()) {
      if (reg_req_ != NULL) reg_req_->::ssp::RegReq::Clear();
    }
    if (has_login_req()) {
      if (login_req_ != NULL) login_req_->::ssp::LoginReq::Clear();
    }
    if (has_logout_req()) {
      if (logout_req_ != NULL) logout_req_->::ssp::LogoutReq::Clear();
    }
    if (has_add_friend_req()) {
      if (add_friend_req_ != NULL) add_friend_req_->::ssp::AddFriendReq::Clear();
    }
    if (has_del_friend_req()) {
      if (del_friend_req_ != NULL) del_friend_req_->::ssp::DelFriendReq::Clear();
    }
    if (has_publish_message_req()) {
      if (publish_message_req_ != NULL) publish_message_req_->::ssp::PublishMessageReq::Clear();
    }
    if (has_get_message_list_req()) {
      if (get_message_list_req_ != NULL) get_message_list_req_->::ssp::GetMessageListReq::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_get_photo_req()) {
      if (get_photo_req_ != NULL) get_photo_req_->::ssp::GetPhotoReq::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommonReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reg_req;
        break;
      }

      // optional .ssp.RegReq reg_req = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reg_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reg_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_login_req;
        break;
      }

      // optional .ssp.LoginReq login_req = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_logout_req;
        break;
      }

      // optional .ssp.LogoutReq logout_req = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logout_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logout_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_add_friend_req;
        break;
      }

      // optional .ssp.AddFriendReq add_friend_req = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_add_friend_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_add_friend_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_del_friend_req;
        break;
      }

      // optional .ssp.DelFriendReq del_friend_req = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_del_friend_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_del_friend_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_publish_message_req;
        break;
      }

      // optional .ssp.PublishMessageReq publish_message_req = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_publish_message_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_publish_message_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_get_message_list_req;
        break;
      }

      // optional .ssp.GetMessageListReq get_message_list_req = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_get_message_list_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_message_list_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_get_photo_req;
        break;
      }

      // optional .ssp.GetPhotoReq get_photo_req = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_get_photo_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_photo_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommonReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ssp.MsgHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional .ssp.RegReq reg_req = 2;
  if (has_reg_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reg_req(), output);
  }

  // optional .ssp.LoginReq login_req = 3;
  if (has_login_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->login_req(), output);
  }

  // optional .ssp.LogoutReq logout_req = 4;
  if (has_logout_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->logout_req(), output);
  }

  // optional .ssp.AddFriendReq add_friend_req = 5;
  if (has_add_friend_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->add_friend_req(), output);
  }

  // optional .ssp.DelFriendReq del_friend_req = 6;
  if (has_del_friend_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->del_friend_req(), output);
  }

  // optional .ssp.PublishMessageReq publish_message_req = 7;
  if (has_publish_message_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->publish_message_req(), output);
  }

  // optional .ssp.GetMessageListReq get_message_list_req = 8;
  if (has_get_message_list_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->get_message_list_req(), output);
  }

  // optional .ssp.GetPhotoReq get_photo_req = 9;
  if (has_get_photo_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->get_photo_req(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommonReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ssp.MsgHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional .ssp.RegReq reg_req = 2;
  if (has_reg_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reg_req(), target);
  }

  // optional .ssp.LoginReq login_req = 3;
  if (has_login_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->login_req(), target);
  }

  // optional .ssp.LogoutReq logout_req = 4;
  if (has_logout_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->logout_req(), target);
  }

  // optional .ssp.AddFriendReq add_friend_req = 5;
  if (has_add_friend_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->add_friend_req(), target);
  }

  // optional .ssp.DelFriendReq del_friend_req = 6;
  if (has_del_friend_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->del_friend_req(), target);
  }

  // optional .ssp.PublishMessageReq publish_message_req = 7;
  if (has_publish_message_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->publish_message_req(), target);
  }

  // optional .ssp.GetMessageListReq get_message_list_req = 8;
  if (has_get_message_list_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->get_message_list_req(), target);
  }

  // optional .ssp.GetPhotoReq get_photo_req = 9;
  if (has_get_photo_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->get_photo_req(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommonReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .ssp.RegReq reg_req = 2;
    if (has_reg_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reg_req());
    }

    // optional .ssp.LoginReq login_req = 3;
    if (has_login_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login_req());
    }

    // optional .ssp.LogoutReq logout_req = 4;
    if (has_logout_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->logout_req());
    }

    // optional .ssp.AddFriendReq add_friend_req = 5;
    if (has_add_friend_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->add_friend_req());
    }

    // optional .ssp.DelFriendReq del_friend_req = 6;
    if (has_del_friend_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->del_friend_req());
    }

    // optional .ssp.PublishMessageReq publish_message_req = 7;
    if (has_publish_message_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->publish_message_req());
    }

    // optional .ssp.GetMessageListReq get_message_list_req = 8;
    if (has_get_message_list_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_message_list_req());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .ssp.GetPhotoReq get_photo_req = 9;
    if (has_get_photo_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_photo_req());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommonReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommonReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommonReq::MergeFrom(const CommonReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
    if (from.has_reg_req()) {
      mutable_reg_req()->::ssp::RegReq::MergeFrom(from.reg_req());
    }
    if (from.has_login_req()) {
      mutable_login_req()->::ssp::LoginReq::MergeFrom(from.login_req());
    }
    if (from.has_logout_req()) {
      mutable_logout_req()->::ssp::LogoutReq::MergeFrom(from.logout_req());
    }
    if (from.has_add_friend_req()) {
      mutable_add_friend_req()->::ssp::AddFriendReq::MergeFrom(from.add_friend_req());
    }
    if (from.has_del_friend_req()) {
      mutable_del_friend_req()->::ssp::DelFriendReq::MergeFrom(from.del_friend_req());
    }
    if (from.has_publish_message_req()) {
      mutable_publish_message_req()->::ssp::PublishMessageReq::MergeFrom(from.publish_message_req());
    }
    if (from.has_get_message_list_req()) {
      mutable_get_message_list_req()->::ssp::GetMessageListReq::MergeFrom(from.get_message_list_req());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_get_photo_req()) {
      mutable_get_photo_req()->::ssp::GetPhotoReq::MergeFrom(from.get_photo_req());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommonReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonReq::CopyFrom(const CommonReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonReq::IsInitialized() const {

  return true;
}

void CommonReq::Swap(CommonReq* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(reg_req_, other->reg_req_);
    std::swap(login_req_, other->login_req_);
    std::swap(logout_req_, other->logout_req_);
    std::swap(add_friend_req_, other->add_friend_req_);
    std::swap(del_friend_req_, other->del_friend_req_);
    std::swap(publish_message_req_, other->publish_message_req_);
    std::swap(get_message_list_req_, other->get_message_list_req_);
    std::swap(get_photo_req_, other->get_photo_req_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommonReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommonReq_descriptor_;
  metadata.reflection = CommonReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommonRsp::kHeaderFieldNumber;
const int CommonRsp::kRegRspFieldNumber;
const int CommonRsp::kLoginRspFieldNumber;
const int CommonRsp::kLogoutRspFieldNumber;
const int CommonRsp::kAddFriendRspFieldNumber;
const int CommonRsp::kDelFriendRspFieldNumber;
const int CommonRsp::kPublishMessageRspFieldNumber;
const int CommonRsp::kGetMessageListRspFieldNumber;
const int CommonRsp::kGetPhotoRspFieldNumber;
#endif  // !_MSC_VER

CommonRsp::CommonRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommonRsp::InitAsDefaultInstance() {
  header_ = const_cast< ::ssp::MsgHeader*>(&::ssp::MsgHeader::default_instance());
  reg_rsp_ = const_cast< ::ssp::RegRsp*>(&::ssp::RegRsp::default_instance());
  login_rsp_ = const_cast< ::ssp::LoginRsp*>(&::ssp::LoginRsp::default_instance());
  logout_rsp_ = const_cast< ::ssp::LogoutRsp*>(&::ssp::LogoutRsp::default_instance());
  add_friend_rsp_ = const_cast< ::ssp::AddFriendRsp*>(&::ssp::AddFriendRsp::default_instance());
  del_friend_rsp_ = const_cast< ::ssp::DelFriendRsp*>(&::ssp::DelFriendRsp::default_instance());
  publish_message_rsp_ = const_cast< ::ssp::PublishMessageRsp*>(&::ssp::PublishMessageRsp::default_instance());
  get_message_list_rsp_ = const_cast< ::ssp::GetMessageListRsp*>(&::ssp::GetMessageListRsp::default_instance());
  get_photo_rsp_ = const_cast< ::ssp::GetPhotoRsp*>(&::ssp::GetPhotoRsp::default_instance());
}

CommonRsp::CommonRsp(const CommonRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommonRsp::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  reg_rsp_ = NULL;
  login_rsp_ = NULL;
  logout_rsp_ = NULL;
  add_friend_rsp_ = NULL;
  del_friend_rsp_ = NULL;
  publish_message_rsp_ = NULL;
  get_message_list_rsp_ = NULL;
  get_photo_rsp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommonRsp::~CommonRsp() {
  SharedDtor();
}

void CommonRsp::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete reg_rsp_;
    delete login_rsp_;
    delete logout_rsp_;
    delete add_friend_rsp_;
    delete del_friend_rsp_;
    delete publish_message_rsp_;
    delete get_message_list_rsp_;
    delete get_photo_rsp_;
  }
}

void CommonRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonRsp_descriptor_;
}

const CommonRsp& CommonRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fdefine_2eproto();
  return *default_instance_;
}

CommonRsp* CommonRsp::default_instance_ = NULL;

CommonRsp* CommonRsp::New() const {
  return new CommonRsp;
}

void CommonRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::ssp::MsgHeader::Clear();
    }
    if (has_reg_rsp()) {
      if (reg_rsp_ != NULL) reg_rsp_->::ssp::RegRsp::Clear();
    }
    if (has_login_rsp()) {
      if (login_rsp_ != NULL) login_rsp_->::ssp::LoginRsp::Clear();
    }
    if (has_logout_rsp()) {
      if (logout_rsp_ != NULL) logout_rsp_->::ssp::LogoutRsp::Clear();
    }
    if (has_add_friend_rsp()) {
      if (add_friend_rsp_ != NULL) add_friend_rsp_->::ssp::AddFriendRsp::Clear();
    }
    if (has_del_friend_rsp()) {
      if (del_friend_rsp_ != NULL) del_friend_rsp_->::ssp::DelFriendRsp::Clear();
    }
    if (has_publish_message_rsp()) {
      if (publish_message_rsp_ != NULL) publish_message_rsp_->::ssp::PublishMessageRsp::Clear();
    }
    if (has_get_message_list_rsp()) {
      if (get_message_list_rsp_ != NULL) get_message_list_rsp_->::ssp::GetMessageListRsp::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_get_photo_rsp()) {
      if (get_photo_rsp_ != NULL) get_photo_rsp_->::ssp::GetPhotoRsp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommonRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reg_rsp;
        break;
      }

      // optional .ssp.RegRsp reg_rsp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reg_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reg_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_login_rsp;
        break;
      }

      // optional .ssp.LoginRsp login_rsp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_logout_rsp;
        break;
      }

      // optional .ssp.LogoutRsp logout_rsp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logout_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logout_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_add_friend_rsp;
        break;
      }

      // optional .ssp.AddFriendRsp add_friend_rsp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_add_friend_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_add_friend_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_del_friend_rsp;
        break;
      }

      // optional .ssp.DelFriendRsp del_friend_rsp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_del_friend_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_del_friend_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_publish_message_rsp;
        break;
      }

      // optional .ssp.PublishMessageRsp publish_message_rsp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_publish_message_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_publish_message_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_get_message_list_rsp;
        break;
      }

      // optional .ssp.GetMessageListRsp get_message_list_rsp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_get_message_list_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_message_list_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_get_photo_rsp;
        break;
      }

      // optional .ssp.GetPhotoRsp get_photo_rsp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_get_photo_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_photo_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommonRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ssp.MsgHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional .ssp.RegRsp reg_rsp = 2;
  if (has_reg_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reg_rsp(), output);
  }

  // optional .ssp.LoginRsp login_rsp = 3;
  if (has_login_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->login_rsp(), output);
  }

  // optional .ssp.LogoutRsp logout_rsp = 4;
  if (has_logout_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->logout_rsp(), output);
  }

  // optional .ssp.AddFriendRsp add_friend_rsp = 5;
  if (has_add_friend_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->add_friend_rsp(), output);
  }

  // optional .ssp.DelFriendRsp del_friend_rsp = 6;
  if (has_del_friend_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->del_friend_rsp(), output);
  }

  // optional .ssp.PublishMessageRsp publish_message_rsp = 7;
  if (has_publish_message_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->publish_message_rsp(), output);
  }

  // optional .ssp.GetMessageListRsp get_message_list_rsp = 8;
  if (has_get_message_list_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->get_message_list_rsp(), output);
  }

  // optional .ssp.GetPhotoRsp get_photo_rsp = 9;
  if (has_get_photo_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->get_photo_rsp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommonRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ssp.MsgHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional .ssp.RegRsp reg_rsp = 2;
  if (has_reg_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reg_rsp(), target);
  }

  // optional .ssp.LoginRsp login_rsp = 3;
  if (has_login_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->login_rsp(), target);
  }

  // optional .ssp.LogoutRsp logout_rsp = 4;
  if (has_logout_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->logout_rsp(), target);
  }

  // optional .ssp.AddFriendRsp add_friend_rsp = 5;
  if (has_add_friend_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->add_friend_rsp(), target);
  }

  // optional .ssp.DelFriendRsp del_friend_rsp = 6;
  if (has_del_friend_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->del_friend_rsp(), target);
  }

  // optional .ssp.PublishMessageRsp publish_message_rsp = 7;
  if (has_publish_message_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->publish_message_rsp(), target);
  }

  // optional .ssp.GetMessageListRsp get_message_list_rsp = 8;
  if (has_get_message_list_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->get_message_list_rsp(), target);
  }

  // optional .ssp.GetPhotoRsp get_photo_rsp = 9;
  if (has_get_photo_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->get_photo_rsp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommonRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .ssp.RegRsp reg_rsp = 2;
    if (has_reg_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reg_rsp());
    }

    // optional .ssp.LoginRsp login_rsp = 3;
    if (has_login_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login_rsp());
    }

    // optional .ssp.LogoutRsp logout_rsp = 4;
    if (has_logout_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->logout_rsp());
    }

    // optional .ssp.AddFriendRsp add_friend_rsp = 5;
    if (has_add_friend_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->add_friend_rsp());
    }

    // optional .ssp.DelFriendRsp del_friend_rsp = 6;
    if (has_del_friend_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->del_friend_rsp());
    }

    // optional .ssp.PublishMessageRsp publish_message_rsp = 7;
    if (has_publish_message_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->publish_message_rsp());
    }

    // optional .ssp.GetMessageListRsp get_message_list_rsp = 8;
    if (has_get_message_list_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_message_list_rsp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .ssp.GetPhotoRsp get_photo_rsp = 9;
    if (has_get_photo_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_photo_rsp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommonRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommonRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommonRsp::MergeFrom(const CommonRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
    if (from.has_reg_rsp()) {
      mutable_reg_rsp()->::ssp::RegRsp::MergeFrom(from.reg_rsp());
    }
    if (from.has_login_rsp()) {
      mutable_login_rsp()->::ssp::LoginRsp::MergeFrom(from.login_rsp());
    }
    if (from.has_logout_rsp()) {
      mutable_logout_rsp()->::ssp::LogoutRsp::MergeFrom(from.logout_rsp());
    }
    if (from.has_add_friend_rsp()) {
      mutable_add_friend_rsp()->::ssp::AddFriendRsp::MergeFrom(from.add_friend_rsp());
    }
    if (from.has_del_friend_rsp()) {
      mutable_del_friend_rsp()->::ssp::DelFriendRsp::MergeFrom(from.del_friend_rsp());
    }
    if (from.has_publish_message_rsp()) {
      mutable_publish_message_rsp()->::ssp::PublishMessageRsp::MergeFrom(from.publish_message_rsp());
    }
    if (from.has_get_message_list_rsp()) {
      mutable_get_message_list_rsp()->::ssp::GetMessageListRsp::MergeFrom(from.get_message_list_rsp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_get_photo_rsp()) {
      mutable_get_photo_rsp()->::ssp::GetPhotoRsp::MergeFrom(from.get_photo_rsp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommonRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonRsp::CopyFrom(const CommonRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonRsp::IsInitialized() const {

  return true;
}

void CommonRsp::Swap(CommonRsp* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(reg_rsp_, other->reg_rsp_);
    std::swap(login_rsp_, other->login_rsp_);
    std::swap(logout_rsp_, other->logout_rsp_);
    std::swap(add_friend_rsp_, other->add_friend_rsp_);
    std::swap(del_friend_rsp_, other->del_friend_rsp_);
    std::swap(publish_message_rsp_, other->publish_message_rsp_);
    std::swap(get_message_list_rsp_, other->get_message_list_rsp_);
    std::swap(get_photo_rsp_, other->get_photo_rsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommonRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommonRsp_descriptor_;
  metadata.reflection = CommonRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserIdByNameReq::kHeaderFieldNumber;
const int GetUserIdByNameReq::kUserNameFieldNumber;
#endif  // !_MSC_VER

GetUserIdByNameReq::GetUserIdByNameReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetUserIdByNameReq::InitAsDefaultInstance() {
  header_ = const_cast< ::ssp::MsgHeader*>(&::ssp::MsgHeader::default_instance());
}

GetUserIdByNameReq::GetUserIdByNameReq(const GetUserIdByNameReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetUserIdByNameReq::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserIdByNameReq::~GetUserIdByNameReq() {
  SharedDtor();
}

void GetUserIdByNameReq::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

void GetUserIdByNameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUserIdByNameReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUserIdByNameReq_descriptor_;
}

const GetUserIdByNameReq& GetUserIdByNameReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fdefine_2eproto();
  return *default_instance_;
}

GetUserIdByNameReq* GetUserIdByNameReq::default_instance_ = NULL;

GetUserIdByNameReq* GetUserIdByNameReq::New() const {
  return new GetUserIdByNameReq;
}

void GetUserIdByNameReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::ssp::MsgHeader::Clear();
    }
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUserIdByNameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_name;
        break;
      }

      // optional string user_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetUserIdByNameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ssp.MsgHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetUserIdByNameReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ssp.MsgHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetUserIdByNameReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional string user_name = 2;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserIdByNameReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUserIdByNameReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUserIdByNameReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUserIdByNameReq::MergeFrom(const GetUserIdByNameReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUserIdByNameReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserIdByNameReq::CopyFrom(const GetUserIdByNameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserIdByNameReq::IsInitialized() const {

  return true;
}

void GetUserIdByNameReq::Swap(GetUserIdByNameReq* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(user_name_, other->user_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUserIdByNameReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUserIdByNameReq_descriptor_;
  metadata.reflection = GetUserIdByNameReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserIdByNameRsp::kHeaderFieldNumber;
const int GetUserIdByNameRsp::kRetFieldNumber;
const int GetUserIdByNameRsp::kUserIdFieldNumber;
#endif  // !_MSC_VER

GetUserIdByNameRsp::GetUserIdByNameRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetUserIdByNameRsp::InitAsDefaultInstance() {
  header_ = const_cast< ::ssp::MsgHeader*>(&::ssp::MsgHeader::default_instance());
}

GetUserIdByNameRsp::GetUserIdByNameRsp(const GetUserIdByNameRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetUserIdByNameRsp::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ret_ = 0;
  user_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserIdByNameRsp::~GetUserIdByNameRsp() {
  SharedDtor();
}

void GetUserIdByNameRsp::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void GetUserIdByNameRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUserIdByNameRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUserIdByNameRsp_descriptor_;
}

const GetUserIdByNameRsp& GetUserIdByNameRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fdefine_2eproto();
  return *default_instance_;
}

GetUserIdByNameRsp* GetUserIdByNameRsp::default_instance_ = NULL;

GetUserIdByNameRsp* GetUserIdByNameRsp::New() const {
  return new GetUserIdByNameRsp;
}

void GetUserIdByNameRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::ssp::MsgHeader::Clear();
    }
    ret_ = 0;
    user_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUserIdByNameRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_user_id;
        break;
      }

      // optional int32 user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetUserIdByNameRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ssp.MsgHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional int32 user_id = 3;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetUserIdByNameRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ssp.MsgHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional int32 user_id = 3;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetUserIdByNameRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserIdByNameRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUserIdByNameRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUserIdByNameRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUserIdByNameRsp::MergeFrom(const GetUserIdByNameRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUserIdByNameRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserIdByNameRsp::CopyFrom(const GetUserIdByNameRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserIdByNameRsp::IsInitialized() const {

  return true;
}

void GetUserIdByNameRsp::Swap(GetUserIdByNameRsp* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(ret_, other->ret_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUserIdByNameRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUserIdByNameRsp_descriptor_;
  metadata.reflection = GetUserIdByNameRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateUserReq::kHeaderFieldNumber;
const int CreateUserReq::kUserNameFieldNumber;
const int CreateUserReq::kPasswordFieldNumber;
const int CreateUserReq::kFromFieldNumber;
#endif  // !_MSC_VER

CreateUserReq::CreateUserReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateUserReq::InitAsDefaultInstance() {
  header_ = const_cast< ::ssp::MsgHeader*>(&::ssp::MsgHeader::default_instance());
}

CreateUserReq::CreateUserReq(const CreateUserReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateUserReq::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  from_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateUserReq::~CreateUserReq() {
  SharedDtor();
}

void CreateUserReq::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

void CreateUserReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateUserReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateUserReq_descriptor_;
}

const CreateUserReq& CreateUserReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fdefine_2eproto();
  return *default_instance_;
}

CreateUserReq* CreateUserReq::default_instance_ = NULL;

CreateUserReq* CreateUserReq::New() const {
  return new CreateUserReq;
}

void CreateUserReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::ssp::MsgHeader::Clear();
    }
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    from_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateUserReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_name;
        break;
      }

      // optional string user_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // optional string password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_from;
        break;
      }

      // optional int32 from = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_)));
          set_has_from();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateUserReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ssp.MsgHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user_name(), output);
  }

  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }

  // optional int32 from = 4;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->from(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateUserReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ssp.MsgHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_name(), target);
  }

  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // optional int32 from = 4;
  if (has_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->from(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateUserReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional string user_name = 2;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional int32 from = 4;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->from());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateUserReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateUserReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateUserReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateUserReq::MergeFrom(const CreateUserReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_from()) {
      set_from(from.from());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateUserReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateUserReq::CopyFrom(const CreateUserReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateUserReq::IsInitialized() const {

  return true;
}

void CreateUserReq::Swap(CreateUserReq* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(user_name_, other->user_name_);
    std::swap(password_, other->password_);
    std::swap(from_, other->from_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateUserReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateUserReq_descriptor_;
  metadata.reflection = CreateUserReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateUserRsp::kHeaderFieldNumber;
const int CreateUserRsp::kRetFieldNumber;
const int CreateUserRsp::kUserIdFieldNumber;
#endif  // !_MSC_VER

CreateUserRsp::CreateUserRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateUserRsp::InitAsDefaultInstance() {
  header_ = const_cast< ::ssp::MsgHeader*>(&::ssp::MsgHeader::default_instance());
}

CreateUserRsp::CreateUserRsp(const CreateUserRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateUserRsp::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ret_ = 0;
  user_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateUserRsp::~CreateUserRsp() {
  SharedDtor();
}

void CreateUserRsp::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void CreateUserRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateUserRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateUserRsp_descriptor_;
}

const CreateUserRsp& CreateUserRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fdefine_2eproto();
  return *default_instance_;
}

CreateUserRsp* CreateUserRsp::default_instance_ = NULL;

CreateUserRsp* CreateUserRsp::New() const {
  return new CreateUserRsp;
}

void CreateUserRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::ssp::MsgHeader::Clear();
    }
    ret_ = 0;
    user_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateUserRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_user_id;
        break;
      }

      // optional int32 user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateUserRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ssp.MsgHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional int32 user_id = 3;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateUserRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ssp.MsgHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional int32 user_id = 3;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateUserRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateUserRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateUserRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateUserRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateUserRsp::MergeFrom(const CreateUserRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateUserRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateUserRsp::CopyFrom(const CreateUserRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateUserRsp::IsInitialized() const {

  return true;
}

void CreateUserRsp::Swap(CreateUserRsp* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(ret_, other->ret_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateUserRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateUserRsp_descriptor_;
  metadata.reflection = CreateUserRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginCheckReq::kHeaderFieldNumber;
const int LoginCheckReq::kUserNameFieldNumber;
const int LoginCheckReq::kPasswordFieldNumber;
#endif  // !_MSC_VER

LoginCheckReq::LoginCheckReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginCheckReq::InitAsDefaultInstance() {
  header_ = const_cast< ::ssp::MsgHeader*>(&::ssp::MsgHeader::default_instance());
}

LoginCheckReq::LoginCheckReq(const LoginCheckReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginCheckReq::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginCheckReq::~LoginCheckReq() {
  SharedDtor();
}

void LoginCheckReq::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

void LoginCheckReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginCheckReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginCheckReq_descriptor_;
}

const LoginCheckReq& LoginCheckReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fdefine_2eproto();
  return *default_instance_;
}

LoginCheckReq* LoginCheckReq::default_instance_ = NULL;

LoginCheckReq* LoginCheckReq::New() const {
  return new LoginCheckReq;
}

void LoginCheckReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::ssp::MsgHeader::Clear();
    }
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginCheckReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_name;
        break;
      }

      // optional string user_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // optional string password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginCheckReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ssp.MsgHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user_name(), output);
  }

  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginCheckReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ssp.MsgHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_name(), target);
  }

  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginCheckReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional string user_name = 2;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginCheckReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginCheckReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginCheckReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginCheckReq::MergeFrom(const LoginCheckReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginCheckReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginCheckReq::CopyFrom(const LoginCheckReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginCheckReq::IsInitialized() const {

  return true;
}

void LoginCheckReq::Swap(LoginCheckReq* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(user_name_, other->user_name_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginCheckReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginCheckReq_descriptor_;
  metadata.reflection = LoginCheckReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginCheckRsp::kHeaderFieldNumber;
const int LoginCheckRsp::kRetFieldNumber;
const int LoginCheckRsp::kUserIdFieldNumber;
#endif  // !_MSC_VER

LoginCheckRsp::LoginCheckRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginCheckRsp::InitAsDefaultInstance() {
  header_ = const_cast< ::ssp::MsgHeader*>(&::ssp::MsgHeader::default_instance());
}

LoginCheckRsp::LoginCheckRsp(const LoginCheckRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginCheckRsp::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ret_ = 0;
  user_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginCheckRsp::~LoginCheckRsp() {
  SharedDtor();
}

void LoginCheckRsp::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void LoginCheckRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginCheckRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginCheckRsp_descriptor_;
}

const LoginCheckRsp& LoginCheckRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fdefine_2eproto();
  return *default_instance_;
}

LoginCheckRsp* LoginCheckRsp::default_instance_ = NULL;

LoginCheckRsp* LoginCheckRsp::New() const {
  return new LoginCheckRsp;
}

void LoginCheckRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::ssp::MsgHeader::Clear();
    }
    ret_ = 0;
    user_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginCheckRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_user_id;
        break;
      }

      // optional int32 user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginCheckRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ssp.MsgHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional int32 user_id = 3;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginCheckRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ssp.MsgHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional int32 user_id = 3;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginCheckRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginCheckRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginCheckRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginCheckRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginCheckRsp::MergeFrom(const LoginCheckRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginCheckRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginCheckRsp::CopyFrom(const LoginCheckRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginCheckRsp::IsInitialized() const {

  return true;
}

void LoginCheckRsp::Swap(LoginCheckRsp* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(ret_, other->ret_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginCheckRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginCheckRsp_descriptor_;
  metadata.reflection = LoginCheckRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckUserExistReq::kHeaderFieldNumber;
const int CheckUserExistReq::kUserIdFieldNumber;
#endif  // !_MSC_VER

CheckUserExistReq::CheckUserExistReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CheckUserExistReq::InitAsDefaultInstance() {
  header_ = const_cast< ::ssp::MsgHeader*>(&::ssp::MsgHeader::default_instance());
}

CheckUserExistReq::CheckUserExistReq(const CheckUserExistReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CheckUserExistReq::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  user_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckUserExistReq::~CheckUserExistReq() {
  SharedDtor();
}

void CheckUserExistReq::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void CheckUserExistReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckUserExistReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckUserExistReq_descriptor_;
}

const CheckUserExistReq& CheckUserExistReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fdefine_2eproto();
  return *default_instance_;
}

CheckUserExistReq* CheckUserExistReq::default_instance_ = NULL;

CheckUserExistReq* CheckUserExistReq::New() const {
  return new CheckUserExistReq;
}

void CheckUserExistReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::ssp::MsgHeader::Clear();
    }
    user_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckUserExistReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CheckUserExistReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ssp.MsgHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CheckUserExistReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ssp.MsgHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional int32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CheckUserExistReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckUserExistReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckUserExistReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckUserExistReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckUserExistReq::MergeFrom(const CheckUserExistReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckUserExistReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckUserExistReq::CopyFrom(const CheckUserExistReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckUserExistReq::IsInitialized() const {

  return true;
}

void CheckUserExistReq::Swap(CheckUserExistReq* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckUserExistReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckUserExistReq_descriptor_;
  metadata.reflection = CheckUserExistReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckUserExistRsp::kHeaderFieldNumber;
const int CheckUserExistRsp::kRetFieldNumber;
#endif  // !_MSC_VER

CheckUserExistRsp::CheckUserExistRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CheckUserExistRsp::InitAsDefaultInstance() {
  header_ = const_cast< ::ssp::MsgHeader*>(&::ssp::MsgHeader::default_instance());
}

CheckUserExistRsp::CheckUserExistRsp(const CheckUserExistRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CheckUserExistRsp::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckUserExistRsp::~CheckUserExistRsp() {
  SharedDtor();
}

void CheckUserExistRsp::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void CheckUserExistRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckUserExistRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckUserExistRsp_descriptor_;
}

const CheckUserExistRsp& CheckUserExistRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fdefine_2eproto();
  return *default_instance_;
}

CheckUserExistRsp* CheckUserExistRsp::default_instance_ = NULL;

CheckUserExistRsp* CheckUserExistRsp::New() const {
  return new CheckUserExistRsp;
}

void CheckUserExistRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::ssp::MsgHeader::Clear();
    }
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckUserExistRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CheckUserExistRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ssp.MsgHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CheckUserExistRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ssp.MsgHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CheckUserExistRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckUserExistRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckUserExistRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckUserExistRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckUserExistRsp::MergeFrom(const CheckUserExistRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckUserExistRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckUserExistRsp::CopyFrom(const CheckUserExistRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckUserExistRsp::IsInitialized() const {

  return true;
}

void CheckUserExistRsp::Swap(CheckUserExistRsp* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckUserExistRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckUserExistRsp_descriptor_;
  metadata.reflection = CheckUserExistRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerToUserReq::kHeaderFieldNumber;
const int ServerToUserReq::kGetUserIdFieldNumber;
const int ServerToUserReq::kCreateUserFieldNumber;
const int ServerToUserReq::kLoginCheckFieldNumber;
const int ServerToUserReq::kCheckUserExistFieldNumber;
#endif  // !_MSC_VER

ServerToUserReq::ServerToUserReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerToUserReq::InitAsDefaultInstance() {
  header_ = const_cast< ::ssp::MsgHeader*>(&::ssp::MsgHeader::default_instance());
  get_user_id_ = const_cast< ::ssp::GetUserIdByNameReq*>(&::ssp::GetUserIdByNameReq::default_instance());
  create_user_ = const_cast< ::ssp::CreateUserReq*>(&::ssp::CreateUserReq::default_instance());
  login_check_ = const_cast< ::ssp::LoginCheckReq*>(&::ssp::LoginCheckReq::default_instance());
  check_user_exist_ = const_cast< ::ssp::CheckUserExistReq*>(&::ssp::CheckUserExistReq::default_instance());
}

ServerToUserReq::ServerToUserReq(const ServerToUserReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerToUserReq::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  get_user_id_ = NULL;
  create_user_ = NULL;
  login_check_ = NULL;
  check_user_exist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerToUserReq::~ServerToUserReq() {
  SharedDtor();
}

void ServerToUserReq::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete get_user_id_;
    delete create_user_;
    delete login_check_;
    delete check_user_exist_;
  }
}

void ServerToUserReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerToUserReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerToUserReq_descriptor_;
}

const ServerToUserReq& ServerToUserReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fdefine_2eproto();
  return *default_instance_;
}

ServerToUserReq* ServerToUserReq::default_instance_ = NULL;

ServerToUserReq* ServerToUserReq::New() const {
  return new ServerToUserReq;
}

void ServerToUserReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::ssp::MsgHeader::Clear();
    }
    if (has_get_user_id()) {
      if (get_user_id_ != NULL) get_user_id_->::ssp::GetUserIdByNameReq::Clear();
    }
    if (has_create_user()) {
      if (create_user_ != NULL) create_user_->::ssp::CreateUserReq::Clear();
    }
    if (has_login_check()) {
      if (login_check_ != NULL) login_check_->::ssp::LoginCheckReq::Clear();
    }
    if (has_check_user_exist()) {
      if (check_user_exist_ != NULL) check_user_exist_->::ssp::CheckUserExistReq::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerToUserReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_get_user_id;
        break;
      }

      // optional .ssp.GetUserIdByNameReq get_user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_get_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_user_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_create_user;
        break;
      }

      // optional .ssp.CreateUserReq create_user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_create_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_login_check;
        break;
      }

      // optional .ssp.LoginCheckReq login_check = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login_check:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login_check()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_check_user_exist;
        break;
      }

      // optional .ssp.CheckUserExistReq check_user_exist = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_check_user_exist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_check_user_exist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerToUserReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ssp.MsgHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional .ssp.GetUserIdByNameReq get_user_id = 2;
  if (has_get_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->get_user_id(), output);
  }

  // optional .ssp.CreateUserReq create_user = 3;
  if (has_create_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->create_user(), output);
  }

  // optional .ssp.LoginCheckReq login_check = 4;
  if (has_login_check()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->login_check(), output);
  }

  // optional .ssp.CheckUserExistReq check_user_exist = 5;
  if (has_check_user_exist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->check_user_exist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerToUserReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ssp.MsgHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional .ssp.GetUserIdByNameReq get_user_id = 2;
  if (has_get_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->get_user_id(), target);
  }

  // optional .ssp.CreateUserReq create_user = 3;
  if (has_create_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->create_user(), target);
  }

  // optional .ssp.LoginCheckReq login_check = 4;
  if (has_login_check()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->login_check(), target);
  }

  // optional .ssp.CheckUserExistReq check_user_exist = 5;
  if (has_check_user_exist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->check_user_exist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerToUserReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .ssp.GetUserIdByNameReq get_user_id = 2;
    if (has_get_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_user_id());
    }

    // optional .ssp.CreateUserReq create_user = 3;
    if (has_create_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->create_user());
    }

    // optional .ssp.LoginCheckReq login_check = 4;
    if (has_login_check()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login_check());
    }

    // optional .ssp.CheckUserExistReq check_user_exist = 5;
    if (has_check_user_exist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->check_user_exist());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerToUserReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerToUserReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerToUserReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerToUserReq::MergeFrom(const ServerToUserReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
    if (from.has_get_user_id()) {
      mutable_get_user_id()->::ssp::GetUserIdByNameReq::MergeFrom(from.get_user_id());
    }
    if (from.has_create_user()) {
      mutable_create_user()->::ssp::CreateUserReq::MergeFrom(from.create_user());
    }
    if (from.has_login_check()) {
      mutable_login_check()->::ssp::LoginCheckReq::MergeFrom(from.login_check());
    }
    if (from.has_check_user_exist()) {
      mutable_check_user_exist()->::ssp::CheckUserExistReq::MergeFrom(from.check_user_exist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerToUserReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerToUserReq::CopyFrom(const ServerToUserReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerToUserReq::IsInitialized() const {

  return true;
}

void ServerToUserReq::Swap(ServerToUserReq* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(get_user_id_, other->get_user_id_);
    std::swap(create_user_, other->create_user_);
    std::swap(login_check_, other->login_check_);
    std::swap(check_user_exist_, other->check_user_exist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerToUserReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerToUserReq_descriptor_;
  metadata.reflection = ServerToUserReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserToServerRsp::kHeaderFieldNumber;
const int UserToServerRsp::kGetUserIdFieldNumber;
const int UserToServerRsp::kCreateUserFieldNumber;
const int UserToServerRsp::kLoginCheckFieldNumber;
const int UserToServerRsp::kCheckUserExistFieldNumber;
#endif  // !_MSC_VER

UserToServerRsp::UserToServerRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserToServerRsp::InitAsDefaultInstance() {
  header_ = const_cast< ::ssp::MsgHeader*>(&::ssp::MsgHeader::default_instance());
  get_user_id_ = const_cast< ::ssp::GetUserIdByNameRsp*>(&::ssp::GetUserIdByNameRsp::default_instance());
  create_user_ = const_cast< ::ssp::CreateUserRsp*>(&::ssp::CreateUserRsp::default_instance());
  login_check_ = const_cast< ::ssp::LoginCheckRsp*>(&::ssp::LoginCheckRsp::default_instance());
  check_user_exist_ = const_cast< ::ssp::CheckUserExistRsp*>(&::ssp::CheckUserExistRsp::default_instance());
}

UserToServerRsp::UserToServerRsp(const UserToServerRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserToServerRsp::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  get_user_id_ = NULL;
  create_user_ = NULL;
  login_check_ = NULL;
  check_user_exist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserToServerRsp::~UserToServerRsp() {
  SharedDtor();
}

void UserToServerRsp::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete get_user_id_;
    delete create_user_;
    delete login_check_;
    delete check_user_exist_;
  }
}

void UserToServerRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserToServerRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserToServerRsp_descriptor_;
}

const UserToServerRsp& UserToServerRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fdefine_2eproto();
  return *default_instance_;
}

UserToServerRsp* UserToServerRsp::default_instance_ = NULL;

UserToServerRsp* UserToServerRsp::New() const {
  return new UserToServerRsp;
}

void UserToServerRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::ssp::MsgHeader::Clear();
    }
    if (has_get_user_id()) {
      if (get_user_id_ != NULL) get_user_id_->::ssp::GetUserIdByNameRsp::Clear();
    }
    if (has_create_user()) {
      if (create_user_ != NULL) create_user_->::ssp::CreateUserRsp::Clear();
    }
    if (has_login_check()) {
      if (login_check_ != NULL) login_check_->::ssp::LoginCheckRsp::Clear();
    }
    if (has_check_user_exist()) {
      if (check_user_exist_ != NULL) check_user_exist_->::ssp::CheckUserExistRsp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserToServerRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssp.MsgHeader header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_get_user_id;
        break;
      }

      // optional .ssp.GetUserIdByNameRsp get_user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_get_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_user_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_create_user;
        break;
      }

      // optional .ssp.CreateUserRsp create_user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_create_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_login_check;
        break;
      }

      // optional .ssp.LoginCheckRsp login_check = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login_check:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login_check()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_check_user_exist;
        break;
      }

      // optional .ssp.CheckUserExistRsp check_user_exist = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_check_user_exist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_check_user_exist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserToServerRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ssp.MsgHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional .ssp.GetUserIdByNameRsp get_user_id = 2;
  if (has_get_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->get_user_id(), output);
  }

  // optional .ssp.CreateUserRsp create_user = 3;
  if (has_create_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->create_user(), output);
  }

  // optional .ssp.LoginCheckRsp login_check = 4;
  if (has_login_check()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->login_check(), output);
  }

  // optional .ssp.CheckUserExistRsp check_user_exist = 5;
  if (has_check_user_exist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->check_user_exist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserToServerRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ssp.MsgHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional .ssp.GetUserIdByNameRsp get_user_id = 2;
  if (has_get_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->get_user_id(), target);
  }

  // optional .ssp.CreateUserRsp create_user = 3;
  if (has_create_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->create_user(), target);
  }

  // optional .ssp.LoginCheckRsp login_check = 4;
  if (has_login_check()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->login_check(), target);
  }

  // optional .ssp.CheckUserExistRsp check_user_exist = 5;
  if (has_check_user_exist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->check_user_exist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserToServerRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ssp.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .ssp.GetUserIdByNameRsp get_user_id = 2;
    if (has_get_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_user_id());
    }

    // optional .ssp.CreateUserRsp create_user = 3;
    if (has_create_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->create_user());
    }

    // optional .ssp.LoginCheckRsp login_check = 4;
    if (has_login_check()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login_check());
    }

    // optional .ssp.CheckUserExistRsp check_user_exist = 5;
    if (has_check_user_exist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->check_user_exist());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserToServerRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserToServerRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserToServerRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserToServerRsp::MergeFrom(const UserToServerRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::ssp::MsgHeader::MergeFrom(from.header());
    }
    if (from.has_get_user_id()) {
      mutable_get_user_id()->::ssp::GetUserIdByNameRsp::MergeFrom(from.get_user_id());
    }
    if (from.has_create_user()) {
      mutable_create_user()->::ssp::CreateUserRsp::MergeFrom(from.create_user());
    }
    if (from.has_login_check()) {
      mutable_login_check()->::ssp::LoginCheckRsp::MergeFrom(from.login_check());
    }
    if (from.has_check_user_exist()) {
      mutable_check_user_exist()->::ssp::CheckUserExistRsp::MergeFrom(from.check_user_exist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserToServerRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserToServerRsp::CopyFrom(const UserToServerRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserToServerRsp::IsInitialized() const {

  return true;
}

void UserToServerRsp::Swap(UserToServerRsp* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(get_user_id_, other->get_user_id_);
    std::swap(create_user_, other->create_user_);
    std::swap(login_check_, other->login_check_);
    std::swap(check_user_exist_, other->check_user_exist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserToServerRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserToServerRsp_descriptor_;
  metadata.reflection = UserToServerRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ssp

// @@protoc_insertion_point(global_scope)
